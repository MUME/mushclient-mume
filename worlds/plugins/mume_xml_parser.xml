<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Wednesday, December 09, 2015, 6:22 PM -->
<!-- MuClient version 4.60 -->

<!-- Plugin "mume_xml_parser" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_xml_parser"
   author="Nick Stockton"
   id="74834d3734b2c8a3a9da4d18"
   sequence="15"
   language="Lua"
   purpose="Parse Mume's XML output."
   date_written="2015-12-09 18:22:34"
   requires="4.60"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>
<!--  Aliases  -->

<aliases>
  <alias
   name="show_prompt"
   match="showprompt"
   enabled="y"
   group="mume_xml_parser"
   send_to="12"
   sequence="100"
  >
  <send>toggle_show_prompt()</send>
  </alias>
</aliases>

<script>
<![CDATA[
require("mystdlib")
local Telnet = require("telnet")


local CONFIG = "d19a2f0a604c96b7318aa67f"
local XML_NONE = 0
local XML_ROOM = 2
local XML_NAME = 4
local XML_DESCRIPTION = 8
local XML_EXITS = 16
local XML_PROMPT = 32
local XML_TERRAIN = 64
local XML_TELL = 128
local XML_NARRATE = 256
local XML_PRAY = 512
local XML_SAY = 1024
local XML_EMOTE = 2048
local XML_REPLACEMENTS = {
	["&lt;"] = "<",
	["&gt;"] = ">",
	["&amp;"] = "&",
}
local BROADCAST_PROMPT = 1
local BROADCAST_MOVEMENT = 2
local BROADCAST_EXITS = 3
local BROADCAST_NAME = 4
local BROADCAST_TELL = 5
local BROADCAST_NARRATE = 6
local BROADCAST_PRAY = 7
local BROADCAST_SAY = 8
local BROADCAST_EMOTE = 9
local PROMPT_REGEX = rex.new([[^(?P<light>[\@\*\!\)o])?(?P<terrain>[\#\(\[\+\.\%fO\~UW\:\=\<])?(?P<weather>[\*\'\"\~]{1,1})?(?P<fog>[\=\-]{1,1})?(?P<movement_flags> [RrSsCcW]{1,4})?(?P<alertness> A\d)?(?P<mood> M\d)?(?P<position> P\d)?(?P<spell_effort> S\d)?(?P<xp> XP\:[\d.]+[kM]?)?(?P<tp> TP\:[\d.]+[k]?)?(?P<hp> HP\:\w+)?(?P<mp> Mana\:\w+)?(?P<mv> Move\:\w+)?(?P<mount> Mount\:\w+)?(?P<fighting> [^\:]+\:\w+)?(?P<buffer> [^\:]+\:\w+)?[^>]*\>$]])
local TERRAIN_SYMBOLS = {
	[":"] = "brush",
	["O"] = "cavern",
	["#"] = "city",
	["."] = "field",
	["f"] = "forest",
	["("] = "hills",
	["["] = "building",
	["<"] = "mountains",
	["W"] = "rapids",
	["+"] = "road",
	["%"] = "shallows",
	["="] = "tunnel",
	["U"] = "underwater",
	["~"] = "water",
}
local LIGHT_SYMBOLS = {
	["@"] = "lit at",
	["*"] = "sun light",
	["!"] = "artificial light",
	[")"] = "moon light",
	["o"] = "darkness",
}


local telnet = Telnet()
local text_buffer = {}
local tag_buffer = {}
local reading_tag = false
local xml_mode = XML_NONE
local in_gratuitous = false
local ignore_next_room = false
local last_communication = ""
local last_data = {}
last_data.fought = "Unknown last fought"
local return_code, show_prompt = CallPlugin(CONFIG, "get", "show_prompt")


local function reset_room()
	last_data.name = ""
	last_data.description = ""
	last_data.dynamic = ""
	last_data.exits = ""
end

local function reset_prompt()
	last_data.prompt = ""
	last_data.light = ""
	last_data.terrain = ""
	last_data.flags = ""
	last_data.sneak = ""
	last_data.xp = ""
	last_data.tp = ""
	last_data.hp = ""
	last_data.mp = ""
	last_data.mv = ""
	last_data.fighting = ""
	last_data.buffer = ""
end

local function character_from_reference (value)
	return (
		string.startswith(value, "x") and string.char(tonumber(string.sub(value, 2), 16))
		or string.char(tonumber(value))
	)
end

local function unescape_xml(data)
	data = string.gsub(data, "&#([0-9a-zA-Z]+);", character_from_reference)
	data = string.gsub(data, "&[a-zA-Z]+;", XML_REPLACEMENTS)
	return data
end

local function points_name(text, default)
	--[[
	Extracts the name of a points item from a prompt.

	I.E. if passed 'hp:fine', would return 'hp'.

	Args:
		text (string): The text to be evaluated.
		default (string): The default text to return if no match.

	Returns:
		string: The extracted value if found or default.
	--]]
	return bool(text) and string.match(string.strip(text), "^([^:]+):") or default
end

local function points_value(text, default)
	--[[
	Extracts the value of a points item from a prompt.

	I.E. if passed 'hp:fine', would return 'fine'.

	Args:
		text (string): The text to be evaluated.
		default (string): The default text to return if no match.

	Returns:
		string: The extracted value if found or default.
	--]]
	return bool(text) and string.match(string.strip(text), ":(%w+)$") or default
end

local function process_text(data)
	if data == "" then
		return ""
	end
	if xml_mode >= XML_TELL and xml_mode <= XML_EMOTE then
		last_communication = last_communication .. data
	elseif xml_mode == XML_NONE and (data:findpos("You quietly scout ") or data:findpos("You let your inner eye find the area... and you see:")) then
		ignore_next_room = true
	elseif ignore_next_room then
		-- The next incoming room data should be ignored.
	elseif xml_mode == XML_PROMPT then
		last_data.prompt = last_data.prompt .. data
		if not show_prompt then
			return ""
		end
	elseif xml_mode == XML_ROOM then
		-- dynamic description
		last_data.dynamic = last_data.dynamic .. data
	elseif xml_mode == XML_NAME then
		last_data.name = last_data.name .. data
	elseif xml_mode == XML_DESCRIPTION then
		last_data.description = last_data.description .. data
	elseif xml_mode == XML_EXITS then
		last_data.exits = last_data.exits .. data
	end
	if in_gratuitous then
		return ""
	end
	return data
end

local function process_tag(tag)
	local output_buffer = {}
	if xml_mode == XML_NONE then
		if tag == "/xml" then
			-- XML mode was turned off by the player.
			xml_mode = XML_NONE
		elseif tag == "tell" then
			xml_mode = XML_TELL
		elseif tag == "narrate" then
			xml_mode = XML_NARRATE
		elseif tag == "pray" then
			xml_mode = XML_PRAY
		elseif tag == "say" then
			xml_mode = XML_SAY
		elseif tag == "emote" then
			xml_mode = XML_EMOTE
		elseif tag == "prompt" then
			ignore_next_room = false
			reset_prompt()
			xml_mode = XML_PROMPT
		elseif string.startswith(tag, "room") then
			if not ignore_next_room then
				reset_room()
			end
			xml_mode = XML_ROOM
		elseif string.startswith(tag, "movement") then
			ignore_next_room = false
			BroadcastPlugin(BROADCAST_MOVEMENT, string.sub(tag, 14, -2))
		elseif tag == "status" then
			xml_mode = XML_NONE
		end
	elseif xml_mode == XML_ROOM then
		if tag == "name" then
			xml_mode = XML_NAME
		elseif tag == "description" then
			xml_mode = XML_DESCRIPTION
		elseif tag == "terrain" then
			xml_mode = XML_TERRAIN
		elseif tag == "exits" then
			xml_mode = XML_EXITS
		elseif tag == "gratuitous" then
			in_gratuitous = true
		elseif tag == "/gratuitous" then
			in_gratuitous = false
		elseif tag == "/room" then
			xml_mode = XML_NONE
		end
	elseif (xml_mode == XML_DESCRIPTION and tag == "/description") or (xml_mode == XML_TERRAIN and tag == "/terrain") then
		xml_mode = XML_ROOM
	elseif xml_mode == XML_NAME and tag == "/name" then
		xml_mode = XML_ROOM
		BroadcastPlugin(BROADCAST_NAME, StripANSI(last_data.name))
	elseif xml_mode == XML_EXITS and tag == "/exits" then
		xml_mode = XML_ROOM
		BroadcastPlugin(BROADCAST_EXITS, StripANSI(last_data.exits))
	elseif xml_mode == XML_TELL and tag == "/tell" then
		xml_mode = XML_NONE
		BroadcastPlugin(BROADCAST_TELL, StripANSI(last_communication))
		last_communication = ""
	elseif xml_mode == XML_NARRATE and tag == "/narrate" then
		xml_mode = XML_NONE
		BroadcastPlugin(BROADCAST_NARRATE, StripANSI(last_communication))
		last_communication = ""
	elseif xml_mode == XML_PRAY and tag == "/pray" then
		xml_mode = XML_NONE
		BroadcastPlugin(BROADCAST_PRAY, StripANSI(last_communication))
		last_communication = ""
	elseif xml_mode == XML_SAY and tag == "/say" then
		xml_mode = XML_NONE
		BroadcastPlugin(BROADCAST_SAY, StripANSI(last_communication))
		last_communication = ""
	elseif xml_mode == XML_EMOTE and tag == "/emote" then
		xml_mode = XML_NONE
		BroadcastPlugin(BROADCAST_EMOTE, StripANSI(last_communication))
		last_communication = ""
	elseif xml_mode == XML_PROMPT and tag == "/prompt" then
		xml_mode = XML_NONE
		local prompt = StripANSI(last_data.prompt)
		local starting, ending, match = PROMPT_REGEX:match(prompt)
		if match then
			last_data.light = LIGHT_SYMBOLS[match.light] or "Unknown light"
			last_data.terrain = TERRAIN_SYMBOLS[match.terrain] or "Unknown terrain"
			local movement_flags = match.movement_flags and string.format(
				"%s%s%s%s",
				string.findpos(match.movement_flags, "S") and "Sneaking " or string.findpos(match.movement_flags, "s") and "NoSneak " or "",
				string.findpos(match.movement_flags, "W") and "Swimming " or "",
				string.findpos(match.movement_flags, "C") and "Climbing " or string.findpos(match.movement_flags, "c") and "Climbing safely " or "",
				string.findpos(match.movement_flags, "R") and "Riding " or string.findpos(match.movement_flags, "r") and "Ridden " or ""
			) or "No movement flags"
			last_data.flags = string.strip(movement_flags)
			last_data.sneak = match.movement_flags and (string.findpos(match.movement_flags, "S") and "Sneaking" or string.findpos(match.movement_flags, "s") and "NoSneak") or "Off"
			last_data.xp = points_value(match.xp, "Unknown")
			last_data.tp = points_value(match.tp, "Unknown")
			last_data.hp = points_value(match.hp, "Healthy")
			last_data.mp = points_value(match.mp, "Full")
			last_data.mv = string.format("%s %s", points_value(match.mv, "Rested"), match.movement_flags and string.findpos(match.movement_flags, "R") and points_value(match.mount, "Rested") or "Not riding")
			last_data.fighting = string.format("%s %s", points_value(match.fighting, "Unknown"), points_name(match.fighting, "Not fighting"))
			last_data.buffer = string.format("%s %s", points_value(match.buffer, "Unknown"), points_name(match.buffer, "No buffer"))
			if match.fighting then
				last_data.fought = string.format("%s last fought", last_data.fighting)
			end
		elseif not show_prompt then
			-- Abnormal prompt, such as a log-in prompt.
			table.insert(output_buffer, last_data.prompt)
		end
		BroadcastPlugin(BROADCAST_PROMPT, prompt)
	end
	return table.concat(output_buffer, "\n")
end

local function parse_xml(data)
	local output_buffer = {}
	while data ~= "" do
		local app_data, separator
		if reading_tag then
			-- A tag is being parsed.
			app_data, separator, data = string.partition(data, ">")
			table.insert(tag_buffer, app_data)
			if separator == ">" then
				-- End of XML tag.
				table.insert(output_buffer, process_tag(unescape_xml(table.concat(tag_buffer))))
				table.clear(tag_buffer)
				reading_tag = false
			end
		else
			app_data, separator, data = string.partition(data, "<")
			table.insert(text_buffer, app_data)
			if separator == "<" then
				-- Start of tag.
				-- Process the bytes in the text buffer, and write them to the output buffer.
				table.insert(output_buffer, process_text(unescape_xml(table.concat(text_buffer))))
				table.clear(text_buffer)
				reading_tag = true
			end
		end
	end -- while
	if not table.isempty(text_buffer) then
		table.insert(output_buffer, process_text(unescape_xml(table.concat(text_buffer))))
		table.clear(text_buffer)
	end
	return table.concat(output_buffer)
end

function get(key)
	return StripANSI(last_data[key])
end

function toggle_show_prompt()
	show_prompt = not show_prompt
	CallPlugin(CONFIG, "set", "show_prompt", show_prompt)
	Note("Show prompt ", show_prompt and "on" or "off", ".")
end

function OnPluginPacketReceived(data)
	return telnet:parse(data, parse_xml)
end

function OnPluginInstall()
	reset_room()
	reset_prompt()
end

]]>            
 </script> 
</muclient>
