<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Wednesday, December 09, 2015, 6:22 PM -->
<!-- MuClient version 4.60 -->

<!-- Plugin "mume_xml_parser" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_xml_parser"
   author="Nick Stockton"
   id="74834d3734b2c8a3a9da4d18"
   language="Lua"
   purpose="Parse Mume's XML output."
   date_written="2015-12-09 18:22:34"
   requires="4.60"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>
<!--  Aliases  -->

<aliases>
  <alias
   name="show_prompt"
   match="showprompt"
   enabled="y"
   group="mume_xml_parser"
   send_to="12"
   sequence="100"
  >
  <send>toggle_show_prompt()</send>
  </alias>
</aliases>

<script>
<![CDATA[
require("mystdlib")
CONFIG = "d19a2f0a604c96b7318aa67f"

local DELIMITER_REGEX = rex.new([[^(?P<complete>.*(?:[\n]|[\r][\x00]|[\xff][\xfb\xfc\xfd\xfe]?.{1,1}))(?P<remaining>.*)$]], rex.flags().DOTALL)
local NEGOTIATION_BYTES = {["\254"] = true, ["\253"] = true, ["\252"] = true, ["\251"] = true}
local IAC = "\255"
local IAC_IAC = IAC .. IAC
local GA = "\249"
local IAC_GA = IAC .. GA
local SB = "\250"
local SE = "\240"
local XML_NONE = 0
local XML_ROOM = 2
local XML_NAME = 4
local XML_DESCRIPTION = 8
local XML_EXITS = 16
local XML_PROMPT = 32
local XML_TERRAIN = 64
local XML_TELL = 128
local XML_NARRATE = 256
local XML_PRAY = 512
local XML_SAY = 1024
local XML_EMOTE = 2048
local XML_REPLACEMENTS = {
	["&amp;"] = "&",
	["&lt;"] = "<",
	["&gt;"] = ">",
	["&#39;"] = "'",
	["&apos;"] = "'",
	["&quot;"] = '"',
}
local BROADCAST_PROMPT = 1
local BROADCAST_MOVEMENT = 2
local BROADCAST_EXITS = 3
local BROADCAST_NAME = 4
local BROADCAST_TELL = 5
local BROADCAST_NARRATE = 6
local BROADCAST_PRAY = 7
local BROADCAST_SAY = 8
local BROADCAST_EMOTE = 9
local PROMPT_REGEX = rex.new([[^(?P<light>[\@\*\!\)o])?(?P<terrain>[\#\(\[\+\.\%fO\~UW\:\=\<])?(?P<weather>[\*\'\"\~\=\-]{1,2})?(?P<movement_flags> [RrSsCcW]{1,4})?(?P<hp> HP\:\w+)?(?P<mp> Mana\:\w+)?(?P<mv> Move\:\w+)?(?P<mount> Mount\:\w+)?(?P<fighting> [^\:]+\:\w+)?(?P<buffer> [^\:]+\:\w+)?.*?>$]])
local TERRAIN_SYMBOLS = {
	[":"] = "brush",
	["O"] = "cavern",
	["#"] = "city",
	["."] = "field",
	["f"] = "forest",
	["("] = "hills",
	["["] = "indoors",
	["<"] = "mountains",
	["W"] = "rapids",
	["+"] = "road",
	["%"] = "shallow water",
	["="] = "tunnel",
	["U"] = "under water",
	["~"] = "water"
}
local LIGHT_SYMBOLS = {
	["@"] = "lit at",
	["*"] = "sun light",
	["!"] = "artificial light",
	[")"] = "moon light",
	["o"] = "darkness"
}

local text_buffer = {}
local tag_buffer = {}
local in_iac = false
local in_sub_option = false
local in_gratuitous = false
local xml_mode = XML_NONE
local last_data = {}
last_data.fought = "Unknown last fought"
local scouting = false
local reading_tag = false
local data_buffer = ""
local return_code, show_prompt = CallPlugin(CONFIG, "get", "show_prompt")
local last_communication = ""

function get(key)
	return StripANSI(last_data[key])
end

function reset_room()
	last_data.name = ""
	last_data.description = ""
	last_data.dynamic = ""
	last_data.exits = ""
end

function reset_prompt()
	last_data.prompt = ""
	last_data.light = ""
	last_data.terrain = ""
	last_data.flags = ""
	last_data.sneak = ""
	last_data.hp = ""
	last_data.mp = ""
	last_data.mv = ""
	last_data.fighting = ""
	last_data.buffer = ""
end

function toggle_show_prompt()
	show_prompt = not show_prompt
	CallPlugin(CONFIG, "set", "show_prompt", show_prompt)
	Note("Show prompt ", show_prompt and "on" or "off", ".")
end

function escape_iac(data)
	data = string.gsub(data, IAC, IAC_IAC)
	return data
end

function process_text(data)
	if data == "" then
		return ""
	end
	data = string.gsub(data, "&[^; ]+;", XML_REPLACEMENTS)
	if xml_mode == XML_NONE and data:findpos("You quietly scout ") then
		scouting = true
	elseif xml_mode == XML_PROMPT then
		last_data.prompt = last_data.prompt .. data
		if not show_prompt then
			return ""
		end
	elseif xml_mode >= XML_TELL and xml_mode <= XML_EMOTE then
		last_communication = last_communication .. data
	elseif scouting then
		-- The next incoming room data should be ignored. For example if the player is scouting.
	elseif xml_mode == XML_ROOM then
		-- dynamic description
		last_data.dynamic = string.format("%s%s\n", last_data.dynamic, data)
	elseif xml_mode == XML_NAME then
		last_data.name = last_data.name .. data
	elseif xml_mode == XML_DESCRIPTION then
		last_data.description = string.format("%s%s\n", last_data.description, data)
	elseif xml_mode == XML_EXITS then
		last_data.exits = last_data.exits .. data
	end
	if in_gratuitous then
		return ""
	end
	return escape_iac(data)
end

function process_tag(tag)
	if xml_mode == XML_NONE then
		if tag == "/xml" then
			-- XML mode was turned off by the player.
			xml_mode = XML_NONE
		elseif tag == "tell" then
			xml_mode = XML_TELL
		elseif tag == "narrate" then
			xml_mode = XML_NARRATE
		elseif tag == "pray" then
			xml_mode = XML_PRAY
		elseif tag == "say" then
			xml_mode = XML_SAY
		elseif tag == "emote" then
			xml_mode = XML_EMOTE
		elseif tag == "prompt" then
			scouting = false
			reset_prompt()
			xml_mode = XML_PROMPT
		elseif tag == "room" then
			if not scouting then
				reset_room()
			end
			xml_mode = XML_ROOM
		elseif string.startswith(tag, "movement") then
			scouting = false
			BroadcastPlugin(BROADCAST_MOVEMENT, string.match(tag, "^movement dir=(%w+)/$") or "")
		elseif tag == "status" then
			xml_mode = XML_NONE
		end
	elseif xml_mode == XML_ROOM then
		if tag == "name" then
			xml_mode = XML_NAME
		elseif tag == "description" then
			xml_mode = XML_DESCRIPTION
		elseif tag == "terrain" then
			xml_mode = XML_TERRAIN
		elseif tag == "exits" then
			xml_mode = XML_EXITS
		elseif tag == "gratuitous" then
			in_gratuitous = true
		elseif tag == "/gratuitous" then
			in_gratuitous = false
		elseif tag == "/room" then
			xml_mode = XML_NONE
		end
	elseif (xml_mode == XML_DESCRIPTION and tag == "/description") or (xml_mode == XML_TERRAIN and tag == "/terrain") then
		xml_mode = XML_ROOM
	elseif xml_mode == XML_NAME and tag == "/name" then
		xml_mode = XML_ROOM
		BroadcastPlugin(BROADCAST_NAME, StripANSI(last_data.name))
	elseif xml_mode == XML_EXITS and tag == "/exits" then
		xml_mode = XML_ROOM
		BroadcastPlugin(BROADCAST_EXITS, StripANSI(last_data.exits))
	elseif xml_mode == XML_TELL and tag == "/tell" then
		xml_mode = XML_NONE
		BroadcastPlugin(BROADCAST_TELL, StripANSI(last_communication))
		last_communication = ""
	elseif xml_mode == XML_NARRATE and tag == "/narrate" then
		xml_mode = XML_NONE
		BroadcastPlugin(BROADCAST_NARRATE, StripANSI(last_communication))
		last_communication = ""
	elseif xml_mode == XML_PRAY and tag == "/pray" then
		xml_mode = XML_NONE
		BroadcastPlugin(BROADCAST_PRAY, StripANSI(last_communication))
		last_communication = ""
	elseif xml_mode == XML_SAY and tag == "/say" then
		xml_mode = XML_NONE
		BroadcastPlugin(BROADCAST_SAY, StripANSI(last_communication))
		last_communication = ""
	elseif xml_mode == XML_EMOTE and tag == "/emote" then
		xml_mode = XML_NONE
		BroadcastPlugin(BROADCAST_EMOTE, StripANSI(last_communication))
		last_communication = ""
	elseif xml_mode == XML_PROMPT and tag == "/prompt" then
		xml_mode = XML_NONE
		local prompt = StripANSI(last_data.prompt)
		local starting, ending, match = PROMPT_REGEX:match(prompt)
		if match then
			last_data.light = match["light"] and LIGHT_SYMBOLS[match["light"]] or "Unknown light"
			last_data.terrain = match["terrain"] and TERRAIN_SYMBOLS[match["terrain"]] or "Unknown terrain"
			last_data.flags = match["movement_flags"] and string.strip(string.format("%s%s%s%s", string.match(match["movement_flags"], "[S]") and "Sneaking " or string.match(match["movement_flags"], "[s]") and "NoSneak " or "", string.match(match["movement_flags"], "[W]") and "Swimming " or "", string.match(match["movement_flags"], "[C]") and "Climbing " or string.match(match["movement_flags"], "[c]") and "Climbing safely " or "", string.match(match["movement_flags"], "[R]") and "Riding " or string.match(match["movement_flags"], "[r]") and "Ridden " or "")) or "No movement flags"
			last_data.sneak = match["movement_flags"] and (string.match(match["movement_flags"], "[S]") and "Sneaking" or string.match(match["movement_flags"], "[s]") and "NoSneak") or "Off"
			last_data.hp = match["hp"] and string.split(match["hp"], ":")[2] or "Healthy"
			last_data.mp = match["mp"] and string.split(match["mp"], ":")[2] or "Full"
			last_data.mv = string.format("%s %s", match["mv"] and string.split(match["mv"], ":")[2] or "Rested", match["movement_flags"] and string.match(match["movement_flags"], "[R]") and (match["mount"] and string.split(match["mount"], ":")[2] or "Rested") or "Not riding")
			last_data.fighting = string.format("%s %s", match["fighting"] and string.split(match["fighting"], ":")[2] or "Unknown", match["fighting"] and string.strip(string.split(match["fighting"], ":")[1]) or "Not fighting")
			last_data.buffer = string.format("%s %s", match["buffer"] and string.split(match["buffer"], ":")[2] or "Unknown", match["buffer"] and string.strip(string.split(match["buffer"], ":")[1]) or "No buffer")
			if match["fighting"] then
				last_data.fought = string.format("%s last fought", last_data.fighting)
			end
		elseif not show_prompt then
			-- Abnormal prompt, such as a log-in prompt.
			table.insert(text_buffer, last_data.prompt)
		end
		BroadcastPlugin(BROADCAST_PROMPT, prompt)
	end
end

function OnPluginPacketReceived(packet)
	data_buffer = data_buffer .. packet
	packet = nil
	local starting, ending, match = DELIMITER_REGEX:match(data_buffer)
	if not match then
		-- Return nothing and continue buffering until complete data has been received.
		return ""
	end
	-- Handle the complete packets, and add the remaining data to the buffer.
	data_buffer = match["remaining"]
	local data = string.gsub(match["complete"], IAC_GA, "\r\n")
	local result = {}
	for byte in string.gmatch(data, ".") do
		if in_iac then
			-- Telnet negotiation
			if not NEGOTIATION_BYTES[byte] then
				-- Byte is the last byte in a negotiation sequence.
				in_iac = false
			end
			if byte == SB then
				-- Begin sub-negotiation.
				in_sub_option = true
			elseif byte == SE then
				-- End sub-negotiation
				in_sub_option = false
			end
			if byte == IAC then
				-- Escaped IAC.
				table.remove(result) -- Remove IAC from the end of result.
				if reading_tag then
					table.insert(tag_buffer, byte)
				else
					table.insert(text_buffer, byte)
				end
			else
				table.insert(result, byte)
			end
		elseif byte == IAC then
			-- unescaped IAC, start of Telnet negotiation.
			in_iac = true
			table.insert(result, byte)
		elseif in_sub_option then
			-- Pass these through.
			table.insert(result, byte)
		elseif byte == ">" and reading_tag then
			-- End of XML tag.
			process_tag(table.concat(tag_buffer))
			table.clear(tag_buffer)
			reading_tag = false
		elseif reading_tag then
			-- A tag is being parsed, and the end of the tag has *not* been reached yet.
			table.insert(tag_buffer, byte)
		elseif byte == "<" then
			-- Start of tag.
			-- Process the bytes in the text buffer, and write them to the result buffer.
			table.insert(result, process_text(table.concat(text_buffer)))
			table.clear(text_buffer)
			reading_tag = true
		else
			-- Byte is out side of a tag, or in between opening and closing tags.
			table.insert(text_buffer, byte)
		end
	end -- for
	if not reading_tag and not table.isempty(text_buffer) then
		table.insert(result, process_text(table.concat(text_buffer)))
		table.clear(text_buffer)
	end
	return table.concat(result)
end

function OnPluginInstall()
	reset_room()
	reset_prompt()
end

]]>            
 </script> 
</muclient>
