<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Wednesday, December 09, 2015, 6:22 PM -->
<!-- MuClient version 4.60 -->

<!-- Plugin "mume_xml_parser" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_xml_parser"
   author="Nick Stockton"
   id="74834d3734b2c8a3a9da4d18"
   language="Lua"
   purpose="Parse Mume's XML output."
   date_written="2015-12-09 18:22:34"
   requires="4.60"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>
<script>
<![CDATA[
require("mystdlib")

local IGNORE_BYTES = {["\0"] = true, ["\17"] = true}
local NEGOTIATION_BYTES = {["\254"] = true, ["\253"] = true, ["\252"] = true, ["\251"] = true}
local IAC = "\255"
local SB = "\250"
local SE = "\240"
local ESC = "\27"
local XML_NONE = 0
local XML_ROOM = 2
local XML_NAME = 4
local XML_DESCRIPTION = 8
local XML_EXITS = 16
local XML_PROMPT = 32
local XML_TERRAIN = 64
local XML_REPLACEMENTS = {
	["&lt;"] = "<",
	["&gt;"] = ">",
	["&amp;"] = "&",
	["&#39;"] = "'",
	["&apos;"] = "'",
	["&quot;"] = '"',
}

local in_esc = false
local in_iac = false
local in_sub_option = false
local xml_mode = XML_NONE
local last_data = {name="", description="", dynamic="", exits="", prompt=""}
local ignore_next_room = false
local reading_tag = false

function get(key)
	return last_data[key]
end

function process_text(data)
	if data == "" then
		return ""
	elseif string.match(data, "You quietly scout ") then
		ignore_next_room = true
	end
	data = string.gsub(tostring(data), "&[^; ]+;", function(str) return XML_REPLACEMENTS[str] or str end)
	if xml_mode == XML_ROOM then
		-- dynamic description
		last_data["dynamic"] = string.format("%s%s\n", last_data["dynamic"], data)
	elseif xml_mode == XML_NAME then
		last_data["name"] = string.format("%s%s", last_data["name"], data)
	elseif xml_mode == XML_DESCRIPTION then
		last_data["description"] = string.format("%s%s\n", last_data["description"], data)
	elseif xml_mode == XML_EXITS then
		last_data["exits"] = string.format("%s%s", last_data["exits"], data)
	elseif xml_mode == XML_PROMPT then
		last_data["prompt"] = string.format("%s%s", last_data["prompt"], data)
		return ""
	end
	return data
end

function OnPluginPacketReceived(packet)
	local temp_tag = {}
	local temp_characters = {}
	local result = {}
	for byte in packet:gmatch(".") do
		if not in_sub_option and (not in_esc and not in_iac and not IGNORE_BYTES[byte] or in_iac and byte == IAC) then
			in_iac = false
			if reading_tag then
				if byte == ">" then
					if table.getn(temp_tag) > 0 then
						local line = table.concat(temp_tag)
						if xml_mode == XML_NONE then
							if string.startswith(line, "/xml") then
								xml_mode = XML_NONE
							elseif string.startswith(line, "/tell") then
								table.insert(result, ":TELL")
							elseif string.startswith(line, "tell") then
								table.insert(result, "TELL:")
							elseif string.startswith(line, "/narrate") then
								table.insert(result, ":NARRATE")
							elseif string.startswith(line, "narrate") then
								table.insert(result, "NARRATE:")
							elseif string.startswith(line, "/pray") then
								table.insert(result, ":PRAY")
							elseif string.startswith(line, "pray") then
								table.insert(result, "PRAY:")
							elseif string.startswith(line, "/say") then
								table.insert(result, ":SAY")
							elseif string.startswith(line, "say") then
								table.insert(result, "SAY:")
							elseif string.startswith(line, "/emote") then
								table.insert(result, ":EMOTE")
							elseif string.startswith(line, "emote") then
								table.insert(result, "EMOTE:")
							elseif string.startswith(line, "prompt") then
								xml_mode = XML_PROMPT
							elseif ignore_next_room then
								-- Do nothing
							elseif string.startswith(line, "exits") then
								xml_mode = XML_EXITS
							elseif string.startswith(line, "room") then
								last_data = {name="", description="", dynamic="", exits="", prompt=""}
								xml_mode = XML_ROOM
							elseif string.startswith(line, "movement") then
								BroadcastPlugin(2, string.match(line, "^movement dir=(%w+)/$") or "")
							elseif string.startswith(line, "status") then
								xml_mode = XML_NONE
							end
						elseif xml_mode == XML_ROOM then
							if string.startswith(line, "name") then
								xml_mode = XML_NAME
							elseif string.startswith(line, "description") then
								xml_mode = XML_DESCRIPTION
							elseif string.startswith(line, "terrain") then
								xml_mode = XML_TERRAIN
							elseif string.startswith(line, "/room") then
								xml_mode = XML_NONE
							end
						elseif xml_mode == XML_NAME and string.startswith(line, "/name") then
							xml_mode = XML_ROOM
						elseif xml_mode == XML_DESCRIPTION and string.startswith(line, "/description") then
							xml_mode = XML_ROOM
						elseif xml_mode == XML_TERRAIN and string.startswith(line, "/terrain") then
							xml_mode = XML_ROOM
						elseif xml_mode == XML_EXITS and string.startswith(line, "/exits") then
							xml_mode = XML_NONE
						elseif xml_mode == XML_PROMPT and string.startswith(line, "/prompt") then
							BroadcastPlugin(1, "")
							ignore_next_room = false
							xml_mode = XML_NONE
						end
						temp_tag = {}
					end
					reading_tag = false
				else
					table.insert(temp_tag, byte)
				end
			else
				if byte == "<" then
					table.insert(result, process_text(table.concat(temp_characters)))
					temp_characters = {}
					reading_tag = true
				else
					table.insert(temp_characters, byte)
				end
			end
		elseif in_iac then
			table.insert(result, byte)
			if not NEGOTIATION_BYTES[byte] then
				in_iac = false
				if byte == SB then
					in_sub_option = true
				elseif byte == SE then
					in_sub_option = false
				end
			end
		elseif byte == IAC then
			table.insert(result, byte)
			in_iac = true
		elseif in_esc then
			table.insert(result, byte)
			if not string.match(byte, "[%d[;]") then
				in_esc = false
			end
		elseif byte == ESC then
			table.insert(result, byte)
			in_esc = true
		end
	end
	if not reading_tag then
		table.insert(result, process_text(table.concat(temp_characters)))
	end
	return table.concat(result)
end

]]>            
 </script> 
</muclient>
