<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Wednesday, December 09, 2015, 6:22 PM -->
<!-- MuClient version 4.60 -->

<!-- Plugin "mume_xml_parser" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_xml_parser"
   author="Nick Stockton"
   id="74834d3734b2c8a3a9da4d18"
   language="Lua"
   purpose="Parse Mume's XML output."
   date_written="2015-12-09 18:22:34"
   requires="4.60"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>
<!--  Aliases  -->

<aliases>
  <alias
   name="show_prompt"
   match="showprompt"
   enabled="y"
   group="mume_xml_parser"
   send_to="12"
   sequence="100"
  >
  <send>toggle_show_prompt()</send>
  </alias>
</aliases>

<script>
<![CDATA[
require("mystdlib")
CONFIG = "d19a2f0a604c96b7318aa67f"

local IGNORE_BYTES = {["\0"] = true, ["\17"] = true}
local NEGOTIATION_BYTES = {["\254"] = true, ["\253"] = true, ["\252"] = true, ["\251"] = true}
local IAC = "\255"
local GA = "\249"
local IAC_GA = IAC .. GA
local SB = "\250"
local SE = "\240"
local XML_NONE = 0
local XML_ROOM = 2
local XML_NAME = 4
local XML_DESCRIPTION = 8
local XML_EXITS = 16
local XML_PROMPT = 32
local XML_TERRAIN = 64
local XML_TELL = 128
local XML_NARRATE = 256
local XML_PRAY = 512
local XML_SAY = 1024
local XML_EMOTE = 2048
local XML_REPLACEMENTS = {
	["&amp;"] = "&",
	["&lt;"] = "<",
	["&gt;"] = ">",
	["&#39;"] = "'",
	["&apos;"] = "'",
	["&quot;"] = '"',
}
local BROADCAST_PROMPT = 1
local BROADCAST_MOVEMENT = 2
local BROADCAST_EXITS = 3
local BROADCAST_NAME = 4
local BROADCAST_TELL = 5
local BROADCAST_NARRATE = 6
local BROADCAST_PRAY = 7
local BROADCAST_SAY = 8
local BROADCAST_EMOTE = 9

local in_iac = false
local in_sub_option = false
local in_gratuitous = false
local xml_mode = XML_NONE
local last_data = {name="", description="", dynamic="", exits="", prompt=""}
local scouting = false
local reading_tag = false
local initial_packet = true
local last_packet = ""
local return_code, show_prompt = CallPlugin(CONFIG, "get", "show_prompt")
local last_communication = ""

function get(key)
	return last_data[key]
end

function toggle_show_prompt()
	show_prompt = not show_prompt
	CallPlugin(CONFIG, "set", "show_prompt", show_prompt)
	Note("Show prompt ", show_prompt and "on" or "off", ".")
end

function process_text(data)
	if data == "" then
		return ""
	end
	data = string.gsub(data, "&[^; ]+;", XML_REPLACEMENTS)
	if xml_mode == XML_NONE and data:findpos("You quietly scout ") then
		scouting = true
	elseif xml_mode == XML_PROMPT then
		last_data.prompt = last_data.prompt .. StripANSI(data)
		if not show_prompt then
			return ""
		end
	elseif xml_mode >= XML_TELL and xml_mode <= XML_EMOTE then
		last_communication = last_communication .. StripANSI(data)
	elseif scouting then
		-- The next incoming room data should be ignored. For example if the player is scouting.
	elseif xml_mode == XML_ROOM then
		-- dynamic description
		last_data.dynamic = string.format("%s%s\n", last_data.dynamic, StripANSI(data))
	elseif xml_mode == XML_NAME then
		last_data.name = last_data.name .. StripANSI(data)
	elseif xml_mode == XML_DESCRIPTION then
		last_data.description = string.format("%s%s\n", last_data.description, StripANSI(data))
	elseif xml_mode == XML_EXITS then
		last_data.exits = last_data.exits .. StripANSI(data)
	end
	if in_gratuitous then
		return ""
	end
	return data
end

function OnPluginPacketReceived(packet)
	last_packet = last_packet .. packet
	if initial_packet then
		-- This is necessary for displaying the log-in screen before the player types an account/character name.
		if last_packet:findpos("By what name do you wish to be known?") then
			last_packet = ""
			initial_packet = false
		end
		return packet .. IAC_GA
	elseif last_packet:findpos(IAC_GA) then
		-- Split the data on the last IAC-GA sequence (I.E. the Mume prompt) in case of data being broken over multiple packets.
		packet, last_packet = last_packet:match(string.format("(.*%s)(.*)", IAC_GA))
	elseif last_packet:findpos("\n") then
		-- This is needed for instances in which Mume doesn't immediately return a prompt after command output, such as when a player attempts to backstab.
		packet, last_packet = last_packet:match("(.*\n)(.*)")
	else
		-- Data is definitely been broken up over multiple packets.
		-- Return nothing and continue buffering until complete data has been received.
		return ""
	end
	local character_buffer = {}
	local tag_buffer = {}
	local result = {}
	for byte in packet:gmatch(".") do
		if in_iac then
			-- Telnet negotiation
			table.insert(result, byte)
			if not NEGOTIATION_BYTES[byte] then
				-- Byte is the last byte in the negotiation sequence.
				in_iac = false
				if byte == SB then
					-- Begin sub-negotiation.
					in_sub_option = true
				elseif byte == SE then
					-- End sub-negotiation
					in_sub_option = false
				elseif in_sub_option then
					-- Skip.
				elseif byte == GA then
					-- delete IAC GA from result.
					result[table.getn(result)] = nil
					result[table.getn(result)] = nil
					table.insert(result, process_text(table.concat(character_buffer)) .. IAC_GA)
					table.clear(character_buffer)
				end
			end
		elseif byte == IAC then
			-- unescaped IAC, start of Telnet negotiation.
			table.insert(result, byte)
			in_iac = true
		elseif IGNORE_BYTES[byte] then
			table.insert(result, byte)
		elseif reading_tag then
			if byte == ">" then
				-- End of XML tag.
				local tag = table.concat(tag_buffer)
				if tag == "/xml" then
					-- XML mode was turned off by the player.
					xml_mode = XML_NONE
				elseif xml_mode == XML_NONE then
					if tag == "tell" then
						xml_mode = XML_TELL
					elseif tag == "narrate" then
						xml_mode = XML_NARRATE
					elseif tag == "pray" then
						xml_mode = XML_PRAY
					elseif tag == "say" then
						xml_mode = XML_SAY
					elseif tag == "emote" then
						xml_mode = XML_EMOTE
					elseif tag == "prompt" then
						scouting = false
						last_data.prompt = ""
						xml_mode = XML_PROMPT
					elseif tag == "exits" then
						xml_mode = XML_EXITS
					elseif tag == "room" then
						if not scouting then
							last_data.name = ""
							last_data.description = ""
							last_data.dynamic = ""
							last_data.exits = ""
						end
						xml_mode = XML_ROOM
					elseif string.startswith(tag, "movement") then
						scouting = false
						BroadcastPlugin(BROADCAST_MOVEMENT, string.match(tag, "^movement dir=(%w+)/$") or "")
					elseif tag == "status" then
						xml_mode = XML_NONE
					end
				elseif xml_mode == XML_ROOM then
					if tag == "name" then
						xml_mode = XML_NAME
					elseif tag == "description" then
						xml_mode = XML_DESCRIPTION
					elseif tag == "terrain" then
						xml_mode = XML_TERRAIN
					elseif tag == "gratuitous" then
						in_gratuitous = true
					elseif tag == "/gratuitous" then
						in_gratuitous = false
					elseif tag == "/room" then
						xml_mode = XML_NONE
					end
				elseif (xml_mode == XML_DESCRIPTION and tag == "/description") or (xml_mode == XML_TERRAIN and tag == "/terrain") then
					xml_mode = XML_ROOM
				elseif xml_mode == XML_NAME and tag == "/name" then
					xml_mode = XML_ROOM
					BroadcastPlugin(BROADCAST_NAME, last_data.name)
				elseif xml_mode == XML_EXITS and tag == "/exits" then
					xml_mode = XML_NONE
					BroadcastPlugin(BROADCAST_EXITS, last_data.exits)
				elseif xml_mode == XML_TELL and tag == "/tell" then
					xml_mode = XML_NONE
					BroadcastPlugin(BROADCAST_TELL, last_communication)
					last_communication = ""
				elseif xml_mode == XML_NARRATE and tag == "/narrate" then
					xml_mode = XML_NONE
					BroadcastPlugin(BROADCAST_NARRATE, last_communication)
					last_communication = ""
				elseif xml_mode == XML_PRAY and tag == "/pray" then
					xml_mode = XML_NONE
					BroadcastPlugin(BROADCAST_PRAY, last_communication)
					last_communication = ""
				elseif xml_mode == XML_SAY and tag == "/say" then
					xml_mode = XML_NONE
					BroadcastPlugin(BROADCAST_SAY, last_communication)
					last_communication = ""
				elseif xml_mode == XML_EMOTE and tag == "/emote" then
					xml_mode = XML_NONE
					BroadcastPlugin(BROADCAST_EMOTE, last_communication)
					last_communication = ""
				elseif xml_mode == XML_PROMPT and tag == "/prompt" then
					xml_mode = XML_NONE
					BroadcastPlugin(BROADCAST_PROMPT, last_data.prompt)
				end
				table.clear(tag_buffer)
				reading_tag = false
			else
				-- A tag is being parsed, and the end of the tag has *not* been reached yet.
				table.insert(tag_buffer, byte)
			end
		elseif byte == "<" then
			-- Start of tag.
			-- Process the bytes in the character buffer, and write them to the result buffer.
			table.insert(result, process_text(table.concat(character_buffer)))
			table.clear(character_buffer)
			reading_tag = true
		else
			-- Add the byte to the character buffer.
			table.insert(character_buffer, byte)
		end
	end -- for
	if not reading_tag then
		table.insert(result, process_text(table.concat(character_buffer)))
	end
	return table.concat(result)
end

]]>            
 </script> 
</muclient>
