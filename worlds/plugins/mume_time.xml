<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Sunday, February 19, 2012, 4:49 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "mume_time" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_time"
   author="Nick Stockton"
   id="9fdc018bc023962f72f2439d"
   language="Lua"
   purpose="Keeps track of the time in MUME."
   date_written="2012-02-19 04:48:01"
   requires="4.70"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="mume_time"
   match="^(?:It seems as if )?[Tt]he day has begun\.$"
   name="sync_event1"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>sync_event("dawn", 1)</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="^Light gradually filters in\, proclaiming a new sunrise(?: outside)?\.$"
   name="sync_event2"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>sync_event("dawn")</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="^(?:It seems as if )?[Tt]he night has begun\.$"
   name="sync_event3"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>sync_event("dusk", 1)</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="The last ray of light fades, and all is swallowed up in darkness."
   name="sync_event4"
   send_to="12"
   sequence="100"
  >
  <send>sync_event("dusk", 1)</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="^The deepening gloom announces another sunset(?: outside)?\.$"
   name="sync_event5"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>sync_event("dusk")</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="^The current time is (?P&lt;hour&gt;[1-9]|1[0-2])\:(?P&lt;minutes&gt;[0-5]\d) (?P&lt;am_pm&gt;[ap]m)\.$"
   name="sync_from_clock"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>sync_precise(tonumber("%&lt;hour&gt;"), tonumber("%&lt;minutes&gt;"), "%&lt;am_pm&gt;")</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="^(?:(?:It is )?(?P&lt;hour&gt;[1-9]|1[0-2])(?P&lt;am_pm&gt;[ap]m)(?: on ))?\w+\, the (?P&lt;day&gt;\d+)(?:st|[nr]d|th) of (?P<month>\w+)\, [yY]ear (?P&lt;year&gt;\d{4}) of the Third Age\.$"
   name="parse_time"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>
time_parse("%&lt;day&gt;", "%&lt;month&gt;", "%&lt;year&gt;")
if "%&lt;am_pm&gt;" ~= "" then
	sync_precise(tonumber("%&lt;hour&gt;"), 30, "%&lt;am_pm&gt;")
end
  </send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="A huge clock is standing here."
   name="look_at_clock"
   sequence="100"
  >
  <send>look at clock</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="^(?:Reconnecting|Welcome to the land of Middle\-earth\. May your visit here be\.\.\. interesting)\.$"
   name="auto_type_time"
   regexp="y"
   sequence="100"
  >
  <send>time</send>
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="ti"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>time_check()</send>
  </alias>
  <alias
   match="nti"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>time_check("narrate")</send>
  </alias>
  <alias
   match="sti"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>time_check("say")</send>
  </alias>
</aliases>

<!--  Timers  -->

<timers>
  <timer
   enabled="n" minute="1" second="0.00" offset_second="0.00"    send_to="12"
   name="tick_timer"
  >
  <send>time_tick()</send>

  </timer>
</timers>

<!--  Script  -->


<script>
<![CDATA[
INIT_TIMER = math.floor(utils.timer())
FIRST_YEAR = 2850
DAYS_IN_YEAR = 360
MONTHS = {
	{["name"] = "December", ["sindarin"] = "Narwain", ["westron"] = "Afteryule", ["dawn"] = 8, ["dusk"] = 18, ["season"] = "Early-Winter"},
	{["name"] = "January", ["sindarin"] = "Ninui", ["westron"] = "Solmath", ["dawn"] = 9, ["dusk"] = 17, ["season"] = "Winter"},
	{["name"] = "February", ["sindarin"] = "Gwaeron", ["westron"] = "Rethe", ["dawn"] = 8, ["dusk"] = 18, ["season"] = "Late-Winter"},
	{["name"] = "March", ["sindarin"] = "Gwirith", ["westron"] = "Astron", ["dawn"] = 7, ["dusk"] = 19, ["season"] = "Early-Spring"},
	{["name"] = "April", ["sindarin"] = "Lothron", ["westron"] = "Thrimidge", ["dawn"] = 7, ["dusk"] = 20, ["season"] = "Spring"},
	{["name"] = "May", ["sindarin"] = "Norui", ["westron"] = "Forelithe", ["dawn"] = 6, ["dusk"] = 20, ["season"] = "Late-Spring"},
	{["name"] = "June", ["sindarin"] = "Cerveth", ["westron"] = "Afterlithe", ["dawn"] = 5, ["dusk"] = 21, ["season"] = "Early-Summer"},
	{["name"] = "July", ["sindarin"] = "Urui", ["westron"] = "Wedmath", ["dawn"] = 4, ["dusk"] = 22, ["season"] = "Summer"},
	{["name"] = "August", ["sindarin"] = "Ivanneth", ["westron"] = "Halimath", ["dawn"] = 5, ["dusk"] = 21, ["season"] = "Late-Summer"},
	{["name"] = "September", ["sindarin"] = "Narbeleth", ["westron"] = "Winterfilth", ["dawn"] = 6, ["dusk"] = 20, ["season"] = "Early-Autumn"},
	{["name"] = "October", ["sindarin"] = "Hithui", ["westron"] = "Blotmath", ["dawn"] = 7, ["dusk"] = 20, ["season"] = "Autumn"},
	{["name"] = "November", ["sindarin"] = "Girithron", ["westron"] = "Foreyule", ["dawn"] = 7, ["dusk"] = 19, ["season"] = "Late-Autumn"}
}
WEEKDAYS = {
	{["name"] = "Monday", ["sindarin"] = "Orithil", ["westron"] = "Monday"},
	{["name"] = "Tuesday", ["sindarin"] = "Orgaladhad", ["westron"] = "Trewsday"},
	{["name"] = "Wednesday", ["sindarin"] = "Ormenel", ["westron"] = "Hevensday"},
	{["name"] = "Thursday", ["sindarin"] = "Orbelain", ["westron"] = "Mersday"},
	{["name"] = "Friday", ["sindarin"] = "Oraearon", ["westron"] = "Highday"},
	{["name"] = "Saturday", ["sindarin"] = "Orgilion", ["westron"] = "Sterday"},
	{["name"] = "Sunday", ["sindarin"] = "Oranor", ["westron"] = "Sunday"}
}

current_month = 1
current_hour = 0
current_day = 0
current_year = 0
difference = 0

function timer()
	return math.floor(utils.timer()) - INIT_TIMER
end

function time_tick()
	-- increase current_hour (wraps 1 through 24).
	current_hour = current_hour % 24 + 1
	if current_hour == 24 then
		-- increase current_day (wraps 1 through 30).
		current_day = current_day % 30 + 1
	end
	if current_day == 1 and current_hour == 24 then
		-- increase current_month (wraps 1 through 12).
		current_month = current_month % 12 + 1
		if current_month == 1 then
			current_year = current_year + 1
		end
		Note(string.format("%s has begun with the month of %s (%s / %s).", MONTHS[current_month].season, MONTHS[current_month].name, MONTHS[current_month].westron, MONTHS[current_month].sindarin))
	end -- if
end

function time_parse(day, month_name, year)
	current_day = tonumber(day) or 0
	current_year = tonumber(year) or 0
	for i, m in ipairs(MONTHS) do
		if m.westron == month_name or m.sindarin == month_name then
			current_month = (i - 1) % 12 + 1
			break
		end
	end
end

function reset_timer(tick_now)
	if tick_now then
		time_tick()
	end
	EnableTimer("tick_timer", true)
	ResetTimer("tick_timer")
end

function sync_precise(hours, minutes, am_pm)
	hours = hours or 12
	minutes = minutes or 0
	am_pm = am_pm or "am"
	if hours == 12 and am_pm == "am" then
		current_hour = 24
	elseif hours == 12 and am_pm == "pm" then
		current_hour = 12
	elseif am_pm == "am" then
		current_hour = hours
	elseif am_pm == "pm" then
		current_hour = hours + 12
	end
	difference = timer() - minutes - current_hour * 60
	AddTimer("tick_reset", 0, minutes == 0 and 1 or 0, (60 - minutes) % 60, string.format("reset_timer(%s)", tostring(minutes ~= 0)), timer_flag.Enabled + timer_flag.OneShot + timer_flag.ActiveWhenClosed + timer_flag.Replace + timer_flag.Temporary, "")
	SetTimerOption("tick_reset", "send_to", sendto.script)
end

function sync_event(dawn_dusk, hours)
	hours = hours or 0
	current_hour = MONTHS[current_month][dawn_dusk] + hours
	difference = timer() - current_hour * 60
	AddTimer("tick_reset", 0, 0, 0, "reset_timer(false)", timer_flag.Enabled + timer_flag.OneShot + timer_flag.ActiveWhenClosed + timer_flag.Replace + timer_flag.Temporary, "")
	SetTimerOption("tick_reset", "send_to", sendto.script)
end

function time_check(action)
	local elapsed_seconds = difference ~= 0 and timer() - difference or 0
	local mume_hour = difference ~= 0 and math.floor(elapsed_seconds % (24 * 60) / 60) or current_hour
	if difference ~= 0 and mume_hour == 0 then
		mume_hour = 24
	end
	local current_time = ""
	local current_state = ""
	local next_state = ""
	local till_next_state = ""
	if current_month == 0 then
		current_month = 1
	end
	local dawn = MONTHS[current_month].dawn
	local dusk = MONTHS[current_month].dusk
	if mume_hour < dawn then
		current_state = "NIGHT"
		next_state = "DAY"
		till_next_state = tostring(dawn - mume_hour + 1)
	elseif mume_hour >= dusk then
		current_state = "NIGHT"
		next_state = "DAY"
		till_next_state = tostring(25 + dawn - mume_hour)
	elseif mume_hour > dawn and mume_hour < dusk then
		current_state = "DAY"
		next_state = "NIGHT"
		till_next_state = tostring(dusk - mume_hour)
	elseif mume_hour == dawn then
		current_state = "DAWN"
		next_state = "DAY"
		till_next_state = "1"
	end
	if difference == 0 then
		if mume_hour == 12 then
			current_time = "12 pm"
		elseif mume_hour >= 24 then
			current_time = "12 am"
		elseif mume_hour < 12 then
			current_time = string.format("%d am", mume_hour)
		elseif mume_hour > 12 then
			current_time = string.format("%d pm", mume_hour - 12)
		end
	else
		local mume_minutes = elapsed_seconds % 60
		if mume_hour == 12 then
			current_time = string.format("12:%s%d pm", mume_minutes < 10 and "0" or "", mume_minutes)
		elseif mume_hour >= 24 then
			current_time = string.format("12:%s%d am", mume_minutes < 10 and "0" or "", mume_minutes)
		elseif mume_hour < 12 then
			current_time = string.format("%d:%s%d am", mume_hour, mume_minutes < 10 and "0" or "", mume_minutes)
		elseif mume_hour > 12 then
			current_time = string.format("%d:%s%d pm", mume_hour - 12, mume_minutes < 10 and "0" or "", mume_minutes)
		end
	end
	local output = string.format("Game time %s: Dawn: %d am, Dusk: %d pm.", current_time, MONTHS[current_month].dawn, MONTHS[current_month].dusk - 12)
	if action then
		return Send(string.format("%s %s", action, output))
	end
	local next_season_in_mume_days = (((math.floor((current_month - 1) / 3) * 3 + 3) - current_month) * 30) + (30 - current_day) + (1 - math.floor(mume_hour / 24))
	local next_season_in_rl_hours = math.floor(next_season_in_mume_days * 24 / 60)
	local next_winter_in_mume_days = ((12 - current_month) * 30) + (30 - current_day) + (1 - math.floor(mume_hour / 24))
	local next_winter_in_rl_days = math.floor(math.floor(next_winter_in_mume_days * 24 / 60) / 24)
	local next_winter_in_rl_hours = math.floor(next_winter_in_mume_days * 24 / 60) % 24
	local day_of_year = 30 * (current_month - 1) + current_day
	local weekday = WEEKDAYS[(DAYS_IN_YEAR * (current_year - FIRST_YEAR) + day_of_year) % 7 + 1].name
	output = string.format("%s\nIt is currently %s, on %s, %s %s (%s / %s), (%s).", output, current_state, weekday, MONTHS[current_month].name, current_day, MONTHS[current_month].westron, MONTHS[current_month].sindarin, MONTHS[current_month].season)
	output = string.format("%s\nTime left until %s is less than %s tick%s", output, next_state, till_next_state, till_next_state ~= "1" and "s." or "!")
	output = string.format("%s\n%s ends in %d mume day%s or %d real-life hour%s.", output, string.sub(MONTHS[current_month].season, -6), next_season_in_mume_days, next_season_in_mume_days ~= 1 and "s" or "", next_season_in_rl_hours, next_season_in_rl_hours ~= 1 and "s" or "")
	output = string.format("%s\nNext winter starts in %d real-life day%s and %d hour%s.", output, next_winter_in_rl_days, next_winter_in_rl_days ~= 1 and "s" or "", next_winter_in_rl_hours, next_winter_in_rl_hours ~= 1 and "s" or "")
	local full_moon_cycle = 24 * 24
	local moon_day = day_of_year % 24
	local moon_hour = 24 * moon_day + current_hour % 24
	local next_dk_day = 1
	local ticks_until_dk = 0
	if moon_hour <= 17 then
		ticks_until_dk = 17 - moon_hour
	elseif moon_hour <= 24 + 18 then
		ticks_until_dk = 24 + 18 - moon_hour
		next_dk_day = 2
	elseif moon_hour <= 48 + 19 then
		ticks_until_dk = 48 + 19 - moon_hour
		next_dk_day = 3
	else
		ticks_until_dk = full_moon_cycle - moon_hour + 18
	end
	local next_dk_in_rl_hours = math.floor(ticks_until_dk / 60)
	local next_dk_in_rl_minutes = ticks_until_dk % 60
	if ticks_until_dk == 0 then
		output = output .. "\nDK is open now!"
	else
		output = string.format("%s\nDK opens in %d real-life hour%s and %d minute%s (day %d of 3).", output, next_dk_in_rl_hours, next_dk_in_rl_hours ~= 1 and "s" or "", next_dk_in_rl_minutes, next_dk_in_rl_minutes ~= 1 and "s" or "", next_dk_day)
	end
	Note(output)
end

]]>
</script>


</muclient>
