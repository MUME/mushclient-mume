<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Sunday, February 19, 2012, 4:49 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "mume_time" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_time"
   author="Nick Stockton"
   id="9fdc018bc023962f72f2439d"
   language="Lua"
   purpose="Keeps track of the time in MUME."
   date_written="2012-02-19 04:48:01"
   requires="4.70"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="mume_time"
   match="^(?:It seems as if )?[Tt]he day has begun\.$"
   name="sync_event1"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>sync_event("dawn", 1)</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="^Light gradually filters in, proclaiming a new sunrise(?: outside)?\.$"
   name="sync_event2"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>sync_event("dawn")</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="^(?:It seems as if )?[Tt]he night has begun\.$"
   name="sync_event3"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>sync_event("dusk", 1)</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="The last ray of light fades, and all is swallowed up in darkness."
   name="sync_event4"
   send_to="12"
   sequence="100"
  >
  <send>sync_event("dusk", 1)</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="^The deepening gloom announces another sunset(?: outside)?\.$"
   name="sync_event5"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>sync_event("dusk")</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="^The current time is (?P<hour>[1-9]|1[0-2]):(?P<minutes>[0-5]\d) (?P<am_pm>[ap]m)\.$"
   name="sync_from_clock"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>sync_precise(tonumber("%&lt;hour&gt;"), tonumber("%&lt;minutes&gt;"), "%&lt;am_pm&gt;")</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="^(?:(?:It is )?(?P<hour>[1-9]|1[0-2])(?P<am_pm>[ap]m)(?: on ))?\w+\, the (?P<day>\d+)(?:st|[nr]d|th) of (?P<month>\w+)\, [yY]ear (?P<year>\d{4,4}) of the Third Age\.$"
   name="parse_time"
   send_to="12"
   regexp="y"
   sequence="100"
  >
  <send>time_parse("%&lt;day&gt;", "%&lt;month&gt;", "%&lt;year&gt;")
if "%&lt;am_pm&gt;" ~= "" then sync_precise(tonumber("%&lt;hour&gt;"), 30, "%&lt;am_pm&gt;") end</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   match="A huge clock is standing here."
   name="look_at_clock"
   send_to="13"
   sequence="100"
  >
  <send>look at clock</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_time"
   keep_evaluating="y"
   match="^(Reconnecting|Welcome to the land of Middle-earth\. May your visit here be\.\.\. interesting)\.$"
   name="auto_type_time"
   send_to="13"
   regexp="y"
   sequence="100"
  >
  <send>time</send>
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="ti"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>time_check()</send>
  </alias>
  <alias
   match="nti"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>time_check("narrate")</send>
  </alias>
  <alias
   match="sti"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>time_check("say")</send>
  </alias>
</aliases>

<!--  Timers  -->

<timers>
  <timer
   enabled="n" minute="1" second="0.00" offset_second="0.00"    send_to="12"
   name="tick_timer"
  >
  <send>time_tick()</send>

  </timer>
</timers>

<!--  Script  -->


<script>
<![CDATA[
screenReader = "925cdd0331023d9f0b8f05a7"
init_timer = math.floor(utils.timer() * 1000)
months = {
	{name="Afteryule", dawn=8, dusk=18, season="Early-Winter"},
	{name="Solmath", dawn=9, dusk=17, season="Winter"},
	{name="Rethe", dawn=8, dusk=18, season="Late-Winter"},
	{name="Astron", dawn=7, dusk=19, season="Early-Spring"},
	{name="Thrimidge", dawn=7, dusk=20, season="Spring"},
	{name="Forelithe", dawn=6, dusk=20, season="Late-Spring"},
	{name="Afterlithe", dawn=5, dusk=21, season="Early-Summer"},
	{name="Wedmath", dawn=4, dusk=22, season="Summer"},
	{name="Halimath", dawn=5, dusk=21, season="Late-Summer"},
	{name="Winterfilth", dawn=6, dusk=20, season="Early-Autumn"},
	{name="Blotmath", dawn=7, dusk=20, season="Autumn"},
	{name="Foreyule", dawn=7, dusk=19, season="Late-Autumn"},
	{name="Narwain"},
	{name="Ninui"},
	{name="Gwaeron"},
	{name="Gwirith"},
	{name="Lothron"},
	{name="Norui"},
	{name="Cerveth"},
	{name="Urui"},
	{name="Ivanneth"},
	{name="Narbeleth"},
	{name="Hithui"},
	{name="Girithron"}
}
current_month = 1
current_month_name = ""
current_hour = 0
current_day = 0
current_year = 0
current_time = ""
current_state = ""
next_state = ""
till_next_state = ""
difference = 0
secs_to_midnight = 0

function timer()
	return math.floor(utils.timer() * 1000) - init_timer
end

function time_tick()
	-- increase current_hour (wraps 1 through 24)
	current_hour = current_hour%24 + 1
	if current_hour == 24 then
		-- increase current_day (wraps 1 through 30)
		current_day = current_day%30 + 1
	end
	if current_day==1 and current_hour==24 then
		-- increase current_month (wraps 1 through 12)
		current_month = current_month%12 + 1
		for i, m in ipairs(months) do
			if m.name == current_month_name then
				local next_month = i + 1
				if current_month == 1 then
					next_month = next_month - 12
				end
				current_month_name = months[next_month].name
				break
			end -- if
		end -- for
		if current_month == 1 then
			current_year = current_year + 1
		end
		CallPlugin(screenReader, "sayNote", string.format("%s has begun with the month of %s.", months[current_month].season, current_month_name))
	end -- if
end

function time_parse(day, month_name, year)
	current_day = tonumber(day) or 0
	current_year = tonumber(year) or 0
	current_month_name = month_name or ""
	for i, m in ipairs(months) do
		if m.name == current_month_name then
			current_month = (i-1)%12 + 1
			break
		end
	end
end

function reset_timer(tick_now)
	if tick_now then
		time_tick()
	end
	EnableTimer("tick_timer", true)
	ResetTimer("tick_timer")
end

function sync_precise(hours, minutes, am_pm)
	hours = hours or 12
	minutes = minutes or 0
	am_pm = am_pm or "am"
	difference = timer() - minutes * 1000
	if hours==12 and am_pm=="am" then
		current_hour = 24
	elseif hours==12 and am_pm=="pm" then
		current_hour = 12
	elseif am_pm=="am" then
		current_hour = hours
	elseif am_pm=="pm" then
		current_hour = hours + 12
	end
	AddTimer("tick_reset", 0, (minutes==0 and 1 or 0), (60-minutes)%60, string.format("reset_timer(%s)", tostring(minutes~=0)), 37, "")
	SetTimerOption("tick_reset", "send_to", "12")
end

function sync_event(dawn_dusk, hours)
	hours = hours or 0
	difference = timer()
	current_hour = months[current_month][dawn_dusk] + hours
	reset_timer(false)
end

function time_left()
	if current_month == 0 then
		current_month = 1
	end
	local dawn = months[current_month].dawn
	local dusk = months[current_month].dusk
	if current_hour < dawn then
		current_state = "NIGHT"
		next_state = "DAY"
		till_next_state = tostring(dawn - current_hour+1)
	elseif current_hour >= dusk then
		current_state = "NIGHT"
		next_state = "DAY"
		till_next_state = tostring(25+dawn - current_hour)
	elseif current_hour>dawn and current_hour<dusk then
		current_state = "DAY"
		next_state = "NIGHT"
		till_next_state = tostring(dusk - current_hour)
	elseif current_hour == dawn then
		current_state = "DAWN"
		next_state = "DAY"
		till_next_state = "1"
	end
end

function time_left_precise()
	time_left()
	local seconds = 60 - math.floor((timer() - difference) / 1000) % 60
	if seconds > 59 then
		till_next_state = till_next_state..":00"
	elseif seconds < 10 then
		till_next_state = tostring(tonumber(string.match(till_next_state, "[^:]*"))-1)..":0"..tostring(seconds)
	else
		till_next_state = tostring(tonumber(string.match(till_next_state, "[^:]*"))-1)..":"..tostring(seconds)
	end
end

function time_am_pm()
	if current_hour < 12 then
		current_time = tostring(current_hour).." am"
	elseif current_hour>12 and current_hour<24 then
		current_time = tostring(current_hour - 12).." pm"
	elseif current_hour == 12 then
		current_time = "12 pm"
	else
		current_time = "12 am"
	end
end

function time_am_pm_precise()
	local seconds = math.floor((timer() - difference) / 1000) % 60
	local seconds_pretty = seconds<10 and "0" or ""
	local hours_pretty = current_hour<10 and "0" or ""
	if current_hour < 12 then
		current_time = tostring(current_hour)..":"..seconds_pretty..tostring(seconds).." am"
	elseif current_hour>12 and current_hour<24 then
		current_time = tostring(current_hour-12)..":"..seconds_pretty..tostring(seconds).." pm"
	elseif current_hour == 12 then
		current_time = tostring(current_hour)..":"..seconds_pretty..tostring(seconds).." pm"
	else
		current_time = tostring(current_hour-12)..":"..seconds_pretty..tostring(seconds).." am"
	end
	secs_to_midnight = (24*60) - ((current_hour*60)+seconds)
end

function time_season()
	local in_mume_days = (((math.floor((current_month-1)/3)*3 + 3)-current_month)*30) + (30-current_day) + (1 - math.floor(current_hour/24))
	local in_mume_days_pretty = in_mume_days~=1 and "s" or ""
	local in_rl_hours = math.floor(in_mume_days*24 / 60)
	local in_rl_hours_pretty = in_rl_hours~=1 and "s" or ""
	return string.sub(months[current_month].season, -6).." ends in "..tostring(in_mume_days).." mume day"..in_mume_days_pretty.." or "..tostring(in_rl_hours).." real-life hour"..in_rl_hours_pretty.."."
end

function time_winter()
	local in_mume_days = ((12-current_month)*30) + (30-current_day) + (1 - math.floor(current_hour/24))
	local in_rl_days = math.floor(math.floor(in_mume_days*24 / 60)/24)
	local in_rl_days_pretty = in_rl_days~=1 and "s" or ""
	local in_rl_hours = math.floor(in_mume_days*24 / 60) % 24
	local in_rl_hours_pretty = in_rl_hours~=1 and "s" or ""
	return "Next winter starts in "..tostring(in_rl_days).." real-life day"..in_rl_days_pretty.." and "..tostring(in_rl_hours).." hour"..in_rl_hours_pretty.."."
end

function time_check(action)
	time_left()
	if difference == 0 then
		time_am_pm()
	else
		time_am_pm_precise()
	end
	local till_next_state_pretty = till_next_state~="1" and "s." or "!"
	local output = "Game time "..current_time..":    Dawn: "..tostring(months[current_month].dawn).." am, Dusk: "..tostring(months[current_month].dusk-12).." pm."
	if action then
		return Send(action.." "..output)
	end
	output = output.."\nIt is currently "..current_state..", in "..current_month_name..", ("..months[current_month].season..").\n"
	output = output.."Time left until "..next_state.." is less than "..till_next_state.." tick"..till_next_state_pretty.."\n"
	output = output..time_season().."\n"
	output = output..time_winter()
	CallPlugin(screenReader, "sayNote", output)
end

]]>
</script>


</muclient>
