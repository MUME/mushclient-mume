<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>

<plugin
   name="GMCP_handler_NJG"
   author="Nick Gammon"
   id="74f8c420df7d59ad5aa66246"
   language="Lua"
   purpose="Handle GMCP messages and broadcast data"
   date_written="2015-05-06"
   requires="4.59"
   version="1.0"
   sequence="100"
>
<description trim="y">

  GMCP handler for Aardwolf and IRE MUDs.
  
  Type: 'gmcpdebug' to toggle debugging mode.

</description>

</plugin>

<aliases>
<alias
   script="gmcp_debug"
   match="^gmcpdebug\s*([1-3])?$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
></alias>

</aliases>


<script>
<![CDATA[
require("mystdlib")

local IAC = "\255"
local SB = "\250"
local SE = "\240"
local GMCP = "\201"
local SUPPORTED_PACKAGES = {
	"mmapper.grouptell",
	"mmapper.comm.grouptell",
}


local gmcp_debug_enabled = false


function package_from_message(message)
	return table.index(SUPPORTED_PACKAGES, string.lower(message))
end


function escape_iac(data)
	return (string.gsub(data, IAC, IAC .. IAC))
end


function gmcp_debug(name, line, wildcards)
	gmcp_debug_enabled = not gmcp_debug_enabled
	Note("GMCP Debug ", gmcp_debug_enabled and "enabled" or "disabled", ".")
end


function send_gmcp_packet(data)
	-- Helper function to send GMCP data.
	assert(data, "send_gmcp_packet passed a nil message.")
	SendPkt(IAC .. SB .. GMCP .. escape_iac(data) .. IAC .. SE)
end -- send_gmcp_packet


function keep_alive()
	send_gmcp_packet("Core.KeepAlive")
end


function OnPluginTelnetRequest(msg_type, data)
	if msg_type == string.byte(GMCP) and data == "WILL" then
		-- Server offers to handle GMCP.
		return true  -- Tell it yes.
	elseif msg_type == string.byte(GMCP) and data == "SENT_DO" then
		Note("Enabling GMCP.")
		-- This hard-coded block may need to be made into a config table as we add more message types.
		send_gmcp_packet(string.format('Core.Hello { "client": "MUSHclient", "version": "%s" }', Version()))
		send_gmcp_packet('Core.Supports.Set [ "Char 1", "MMapper.GroupTell 1", "MMapper.Comm 1" ]')
		return true
	end
	return false
end -- function OnPluginTelnetRequest


function OnPluginTelnetSubnegotiation(msg_type, data)
	-- Mushclient callback function when telnet SB data is received.
	if msg_type ~= string.byte(GMCP) then
		return
	end -- if not GMCP
	-- debugging
	if gmcp_debug_enabled then
		Note(data)
	end
	local message, params = string.match(data, "^([%a.]+)%s*(.*)$")
	-- if valid format, broadcast to all interested plugins
	local package = package_from_message(message)
	if package then
		BroadcastPlugin(package, params)
	end -- if
end -- function OnPluginTelnetSubnegotiation


function OnPluginDisable()
	EnablePlugin(GetPluginID(), true)
	Note("You are not allowed to disable the ", GetPluginInfo(GetPluginID(), 1), " plugin. It is necessary for other plugins.")
end

]]>
</script>
</muclient>
