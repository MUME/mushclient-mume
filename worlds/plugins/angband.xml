<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, December 21, 2015, 1:07 PM -->
<!-- MuClient version 4.31 -->

<!-- Plugin "angband" generated by Plugin Wizard -->

<muclient>
<plugin
   name="angband"
   author="Nick Stockton"
   id="00b09881b8c4029034b94d80"
   language="Lua"
   purpose="Handles the connection to the Angband chat server."
   date_written="2015-12-21 13:06:47"
   requires="4.00"
   version="1.0"
   >
</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="angband"
   match="^(?:\s*)$"
   name="remove_blank_lines"
   omit_from_output="y"
   regexp="y"
   sequence="10"
  >
  </trigger>
  <trigger
   enabled="y"
   group="angband"
   keep_evaluating="y"
   match="-- Type /help for a list of commands."
   name="start_logging"
   omit_from_output="y"
   send_to="12"
   sequence="20"
  >
  <send>
should_log = true
  </send>
  </trigger>
  <trigger
   enabled="y"
   group="angband"
   match="^(?:.+)$"
   name="incoming_text"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
CallPlugin(screenReader, "sayNote", "%0")
local w = GetWorldById(mume)
if w then
	Note(w, "%0")
end
if should_log then
	log_write("main", "%0")
end
  </send>
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   name="log_review"
   match="^/log(?P&lt;text&gt;\s+.*)?$"
   enabled="y"
   group="angband"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>log_review("main", "%&lt;text&gt;")</send>
  </alias>
</aliases>

<!--  Get our standard constants -->

<include name="constants.lua"/>
<script>
<![CDATA[
require("mystdlib")

screenReader = "925cdd0331023d9f0b8f05a7"
angband = "6ca103daa7e3465230ea22d9"
mume = "6c981ab925deb7bdf50f67e3"

should_log = false

function log_write(channel, text)
	if text:match("^[*<]") then
		local file = io.open(string.format("%scommunication/%s.txt", GetInfo(67), channel), "ab")
		file:write(string.strip(text) .. "\r\n")
		file:close()
	end
end

function log_review(channel, text)
	local text = string.strip(text:lower())
	local output = {}
	local channelLines = {}
	local fileName = string.format("%scommunication/%s.txt", GetInfo(67), channel)
	if not os.isFile(fileName) then
		return CallPlugin(screenReader, "sayNote", string.format("The log file for channel '%s' hasn't been created yet. It will be created when a message to the channel has been received.", channel))
	end
	local file = io.open(fileName, "rb")
	for line in file:read("*all"):gmatch("[^\r\n]+") do
		line = string.strip(line)
		if line ~= "" then
			table.insert(channelLines, line)
		end
	end
	file:close()
	if next(channelLines) == nil then
		-- The channel log file is empty.
		output = {string.capitalize(channelName) .. " log is empty!"}
	elseif string.isdigit(text) and tonumber(text) >= 1 and #channelLines >= tonumber(text) then
		-- The search string is a number, so output the last (N) lines.
		output = table.slice(channelLines, tonumber(text) * -1)
	elseif not string.isdigit(text) and text ~= "" then
		-- Output lines that contain the search string.
		output = {}
		for i, line in ipairs(channelLines) do
			if string.match(line:lower(), text) then
				table.insert(output, line)
			end
		end
	else
		-- The search string is empty, so output the last 20 lines.
		output = table.slice(channelLines, -20, -1)
	end
	if next(output) == nil then
		-- A search string was specified, but no lines matched it.
		table.insert(output, "Nothing found!")
	elseif #output > 500 then
		-- Truncate the output if it exceeds 500 lines.
		output = table.slice(output, -500)
	end
	CallPlugin(screenReader, "sayNote", table.concat(output, "\n"))
end

]]>            
 </script> 
</muclient>
