<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, April 06, 2010, 8:39 AM -->
<!-- MuClient version 4.46 -->

<!-- Plugin "output_functions" generated by Plugin Wizard -->

<muclient>
<plugin
   name="output_functions"
   author="Oriol Gomez"
   id="54846c23d8b15594e7eb4b8a"
   language="Lua"
   purpose="provides functions to help tts users."
   date_written="2010-04-06 08:37:40"
   requires="4.46"
   version="1.0"
   >

</plugin>
<!--  Aliases  -->
<aliases>
<alias
match="Line_Get *"
enabled="y"
script="LineGet"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="prevline"
enabled="y"
script="prev_line"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="toggleinterrupt"
enabled="y"
script="interrupt_toggle"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="curline"
enabled="y"
script="cur_line"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="select"
enabled="y"
script="selectscr"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="nextline"
enabled="y"
script="next_line"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="topline"
enabled="y"
script="top_line"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="endline"
enabled="y"
script="end_line"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
</aliases>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->


<script>
<![CDATA[
screenReader = "925cdd0331023d9f0b8f05a7"
config = "d19a2f0a604c96b7318aa67f"

Accelerator("ctrl + alt + enter", "toggleinterrupt")
Accelerator("ctrl + shift + space", "select")

Accelerator("alt + 0", "Line_Get 10")

for i = 1, 9 do
	Accelerator(string.format("alt + %d", i), string.format("Line_Get %d", i))
end

local return_code, keyboard_layout = CallPlugin(config, "get", "keyboard_layout")
if keyboard_layout == "dvorak" then
	Accelerator("ctrl + shift + n", "nextline")
	Accelerator("ctrl + shift + t", "curline")
	Accelerator("ctrl + shift + h", "prevline")
	Accelerator("ctrl + shift + s", "endline")
	Accelerator("ctrl + shift + d", "topline")
else
	-- Default to qwerty.
	Accelerator("ctrl + shift + l", "nextline")
	Accelerator("ctrl + shift + k", "curline")
	Accelerator("ctrl + shift + j", "prevline")
	Accelerator("ctrl + shift + ;", "endline")
	Accelerator("ctrl + shift + h", "topline")
end

AcceleratorTo("ctrl + shift + c", "copy_key()", sendto.script)

local current_line = 1
local selecting = false
local selection_start = 0
local selected_text = {}
local modes = {} -- for keyboard states

function copy_key()
	local lines = GetLinesInBufferCount()
	if lines <= 1 then
		CallPlugin(screenReader, "say", "No output.", true)
		return
	end
	if current_line == 0 then
		current_line = lines
	end
	while GetLineInfo(current_line, 1) == "" and current_line > 1 and current_line < GetLinesInBufferCount() do
		current_line = current_line + 1
	end
	local line = GetLineInfo(current_line, 1)
	if line == "" and GetLineInfo(current_line + 1, 1) then
		current_line = current_line + 1
		line = GetLineInfo(current_line, 1)
	end
	local normal_key = line:match("^.+ key: '([a-z]+)'$")
	local identify_key = line:match("^Its magical key is ([a-z]+)[.]$")
	if normal_key then
		SetClipboard(normal_key)
		CallPlugin(screenReader, "say", string.format("%s copied", normal_key), true)
	elseif identify_key then
		SetClipboard(identify_key)
		CallPlugin(screenReader, "say", string.format("%s copied", identify_key), true)
	else
		CallPlugin(screenReader, "say", "Key not found", true)
	end
end

function selectscr()
	local lines = GetLinesInBufferCount()
	if lines <= 1 then
		CallPlugin(screenReader, "say", "No output.", true)
		selecting = false
		selected_text = {}
		return
	end
	if not selecting then
		selecting = true
		CallPlugin(screenReader, "say", "selection start.", true)
		selected_text = {}
		selection_start = current_line
	else
		CallPlugin(screenReader, "say", "Selection coppied.", true)
		for i = selection_start, current_line do
			table.insert(selected_text, GetLineInfo(i, 1))
		end
		SetClipboard(table.concat(selected_text, "\r\n"))
		selecting = false
		selected_text = {}
	end
end

function interrupt_toggle()
	local return_code, interrupt = CallPlugin(config, "get", "interrupt_on_enter")
	interrupt = not interrupt
	CallPlugin(config, "set", "interrupt_on_enter", interrupt)
	CallPlugin(screenReader, "sayNote", string.format("interrupt on enter %s.", interrupt and "on" or "off"))
end

function LineGet(name, line, wildcards)
	local lines = GetLinesInBufferCount()
	if lines <= 1 then
		CallPlugin(screenReader, "say", "No output.", true)
		return
	end
	local line_number = wildcards[1]
	local line = GetLineInfo(lines - line_number, 1)
	local timeout = 0.4 -- in seconds
	if not modes[line_number] or os.clock() - modes[line_number].start_time >= timeout then
		modes[line_number] = {start_time = os.clock(), times_pressed = 1}
		CallPlugin(screenReader, "say", line, true)
	else
		modes[line_number].start_time = os.clock()
		modes[line_number].times_pressed = modes[line_number].times_pressed + 1
		if modes[line_number].times_pressed == 2 then
			SetClipboard(line)
			CallPlugin(screenReader, "say", "copied.", true)
		else
			PasteCommand(line)
			CallPlugin(screenReader, "say", "pasted.", true)
		end
	end
end

function OnPluginCommandEntered(command)
	local return_code, interrupt = CallPlugin(config, "get", "interrupt_on_enter")
	if interrupt then
		CallPlugin(screenReader, "silence")
	end
end

function prev_line()
	local lines = GetLinesInBufferCount()
	if lines <= 1 then
		CallPlugin(screenReader, "say", "No output.", true)
		return
	end
	if current_line - 1 <= 1 then
		CallPlugin(screenReader, "say", "top", true)
	else
		current_line = current_line - 1
		while GetLineInfo(current_line, 1) == "" and current_line > 1 and current_line < GetLinesInBufferCount() do
			current_line =current_line - 1
		end
		local line = GetLineInfo(current_line, 1)
		if line == "" then
			current_line = current_line + 1
			line = GetLineInfo(current_line, 1)
		end
		CallPlugin(screenReader, "say", line, true)
	end
end

function cur_line()
	local lines = GetLinesInBufferCount()
	if lines <= 1 then
		CallPlugin(screenReader, "say", "No output.", true)
		return
	end
	if current_line == 0 then
		current_line = lines
	end
	while GetLineInfo(current_line, 1) == "" and current_line > 1 and current_line < GetLinesInBufferCount() do
		current_line = current_line + 1
	end
	local line = GetLineInfo(current_line, 1)
	if line == "" and GetLineInfo(current_line + 1, 1) then
		current_line = current_line + 1
		line = GetLineInfo(current_line, 1)
	end
	CallPlugin(screenReader, "say", line, true)
end

function next_line()
	local lines = GetLinesInBufferCount()
	if lines <= 1 then
		CallPlugin(screenReader, "say", "No output.", true)
		return
	end
	if current_line + 1 >= lines then
		CallPlugin(screenReader, "say", "bottom", true)
	else
		current_line = current_line + 1
		while GetLineInfo(current_line, 1) == "" and current_line > 1 and current_line < GetLinesInBufferCount() do
			current_line = current_line + 1
		end
		local line = GetLineInfo(current_line, 1)
		if line == "" then
			current_line = current_line - 1
			line = GetLineInfo(current_line, 1)
		end
		CallPlugin(screenReader, "say", line, true)
	end
end

function end_line()
	local lines = GetLinesInBufferCount()
	if lines <= 1 then
		CallPlugin(screenReader, "say", "No output.", true)
		return
	end
	current_line = lines
	while GetLineInfo(current_line, 1) == "" and current_line > 1 and current_line <= GetLinesInBufferCount() do
		current_line = current_line - 1
	end
	local line = GetLineInfo(current_line, 1)
	if line == "" then
		current_line = current_line + 1
		line = GetLineInfo(current_line, 1)
	end
	CallPlugin(screenReader, "say", line, true)
end

function top_line()
	local lines = GetLinesInBufferCount()
	if lines <= 1 then
		CallPlugin(screenReader, "say", "No output.", true)
		return
	end
	current_line = 1
	while GetLineInfo(current_line, 1) == "" and current_line >= 1 and current_line < GetLinesInBufferCount() do
		current_line = current_line + 1
	end
	local line = GetLineInfo(current_line, 1)
	if line == "" then
		current_line = current_line - 1
		line = GetLineInfo(current_line, 1)
	end
	CallPlugin(screenReader, "say", line, true)
end

]]>
</script>


</muclient>
