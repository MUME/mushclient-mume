<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, April 06, 2010, 8:39 AM -->
<!-- MuClient version 4.46 -->

<!-- Plugin "output_functions" generated by Plugin Wizard -->

<muclient>
<plugin
   name="output_functions"
   author="Oriol Gomez"
   id="54846c23d8b15594e7eb4b8a"
save_state="y"
   language="Lua"
   purpose="provides functions to help tts users."
   date_written="2010-04-06 08:37:40"
   requires="4.46"
   version="1.0"
   >

</plugin>
<!--  Aliases  -->
<aliases>
<alias
match="Line_Get *"
enabled="y"
script="LineGet"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="prevline"
enabled="y"
script="prev_line"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="toggleinterrupt"
enabled="y"
script="interrupt_toggle"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="curline"
enabled="y"
script="cur_line"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="select"
enabled="y"
script="selectscr"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="nextline"
enabled="y"
script="next_line"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="topline"
enabled="y"
script="top_line"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
<alias
match="endline"
enabled="y"
script="end_line"
omit_from_output="y"
omit_from_log="y"
omit_from_command_history="y"
send_to="12"
sequence="100">
</alias>
</aliases>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->


<script>
<![CDATA[
screenReader = "925cdd0331023d9f0b8f05a7"

for i = 1, 9 do
	Accelerator("alt + "..tostring(i), "Line_Get "..tostring(i))
end

Accelerator("alt +0", "Line_Get 10")
Accelerator("ctrl+alt+enter","toggleinterrupt")
Accelerator("ctrl+shift+space","select")
Accelerator("ctrl+shift+r","nextline")
Accelerator("ctrl+shift+c","curline")
Accelerator("ctrl+shift+g","prevline")
Accelerator("ctrl+shift+n","endline")
Accelerator("ctrl+shift+h","topline")

function selectscr()
	if selecting == 0 or selecting == nil then
		selecting = 1
		CallPlugin(screenReader, "say", "selection start.", true)
		tselect = {}
		sline = cline
	else
		CallPlugin(screenReader, "say", "Selection coppied.", true)
		for i = sline, cline do
			table.insert(tselect, GetLineInfo(i, 1))
		end
		SetClipboard(table.concat(tselect, "\r\n"))
		selecting = 0
		tselect = {}
	end
end

function interrupt_toggle()
	if GetVariable("interrupt") == "1" or GetVariable("interrupt") == nil then
		SetVariable("interrupt", "0")
		CallPlugin(screenReader, "sayNote", "interrupt on enter off")
	else
		SetVariable("interrupt", "1")
		CallPlugin(screenReader, "sayNote", "interrupt on enter on")
	end
end

function LineGet(name, line, wc)
lines=GetLinesInBufferCount()
line=GetLineInfo(lines - wc[1],1)
wc=wc[1]
local timeout = 0.4 -- in seconds
if modes[wc] == nil then
modes[wc] = {os.clock(), 1}
elseif os.clock()-modes[wc][1] >= timeout then
modes[wc][1] = os.clock()
modes[wc][2] = 1
else
modes[wc][1] = os.clock()
modes[wc][2] = modes[wc][2] + 1
end
if modes[wc][2] > 3 then
modes[wc][2] = 3
end
if modes[wc][2] == 3 then
PasteCommand(line)
CallPlugin(screenReader, "say", "pasted.", true)
end
if modes[wc][2] == 2 then
SetClipboard(line)
CallPlugin(screenReader, "say", "copied.", true)
end
if modes[wc][2] == 1 then
CallPlugin(screenReader, "say", line, true)
end
end
function OnPluginCommandEntered(s)
if world.GetVariable("interrupt")=="1" then
CallPlugin(screenReader, "silence")
end
end
function OnPluginInstall()
modes = {} -- for keyboard states
msgbuffer={}
cline=1
line=0
mode={}
end
function prev_line()
lines=GetLinesInBufferCount()
if(cline<=1) then
CallPlugin(screenReader, "say", "top", true)
else
cline=cline-1
while(GetLineInfo(cline,1)=="") and not (cline<=1) and not (cline>=GetLinesInBufferCount()) do
cline=cline-1
end
line=GetLineInfo(cline,1)
if(line=="") then
cline=cline+1
line=GetLineInfo(cline,1)
end
CallPlugin(screenReader, "say", line, true)
end
end
function cur_line()
if(cline==0) then
cline=GetLinesInBufferCount()
end
while(GetLineInfo(cline,1)=="") and not (cline<=1) and not (cline>=GetLinesInBufferCount()) do
cline=cline+1
end
line=GetLineInfo(cline,1)
if(line=="") then
cline=cline+1
line=GetLineInfo(cline,1)
end
CallPlugin(screenReader, "say", line, true)
end
function next_line()
lines=GetLinesInBufferCount()
if(cline>=lines) then
CallPlugin(screenReader, "say", "bottom", true)
else
cline=cline+1
while(GetLineInfo(cline,1)=="") and not (cline<=1) and not (cline>=GetLinesInBufferCount()) do
cline=cline+1
end
line=GetLineInfo(cline,1)
if(line=="") then
cline=cline-1
line=GetLineInfo(cline,1)
end
CallPlugin(screenReader, "say", line, true)
end
end
function end_line()
cline=GetLinesInBufferCount()
while(GetLineInfo(cline,1)=="") and not (cline<=1) and not (cline>GetLinesInBufferCount()) do
cline=cline-1
end
line=GetLineInfo(cline,1)
if(line=="") then
cline=cline+1
line=GetLineInfo(cline,1)
end
CallPlugin(screenReader, "say", line, true)
end
function top_line()
cline=1
while(GetLineInfo(cline,1)=="") and not (cline<1) and not (cline>=GetLinesInBufferCount()) do
cline=cline+1
end
line=GetLineInfo(cline,1)
if(line=="") then
cline=cline-1
line=GetLineInfo(cline,1)
end
CallPlugin(screenReader, "say", line, true)
end
]]>
</script>


</muclient>
