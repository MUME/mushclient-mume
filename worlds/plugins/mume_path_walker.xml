<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Saturday, February 18, 2012, 8:31 PM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "mume_path_walker" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_path_walker"
   author="Nick Stockton"
   id="052dd7f4b9c2157c133bdf75"
   language="Lua"
   purpose="Automaticly follow roads, Sunscreen for trolls, etc."
   date_written="2012-02-18 20:29:28"
   requires="4.70"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<aliases>
  <alias
   match="p *"
   enabled="y"
   group="mume_path_walker"
   send_to="12"
   sequence="100"
  >
  <send>start_walking("%1")</send>
  </alias>
  <alias
   match="pp"
   enabled="y"
   group="mume_path_walker"
   send_to="12"
   sequence="100"
  >
  <send>stop_walking()</send>
  </alias>
</aliases>


<script>
<![CDATA[
require("mystdlib")
gmcp = require("gmcp")
normalize = require("to_ascii").normalize

GMCP_HANDLER_ID = gmcp.get_handler_id()
GMCP_HANDLER_NAME = gmcp.get_handler_name()
EVENT_MOVED = gmcp.name_to_id("event_moved")
ROOM_INFO = gmcp.name_to_id("room_info")
SUPPORTED_GMCP_PACKAGES = table.set_create({EVENT_MOVED, ROOM_INFO})

EXPANDED_DIRECTIONS = {
	["n"] = "north",
	["e"] = "east",
	["s"] = "south",
	["w"] = "west",
	["u"] = "up",
	["d"] = "down",
}
REVERSE_DIRECTIONS = {
	["north"] = "south",
	["east"] = "west",
	["south"] = "north",
	["west"] = "east",
	["up"] = "down",
	["down"] = "up",
}

room_name = ""
walking = false
last_moved = ""
roads = table.set_create({})

function walk_next()
	local ways_forward = {}
	for direction, _ in pairs(roads) do
		if REVERSE_DIRECTIONS[direction] ~= last_moved then
			table.insert(ways_forward, direction)
		end -- if
	end -- for
	if table.getn(ways_forward) == 1 then
		Send(ways_forward[1])
	elseif table.getn(ways_forward) == 0 then
		if room_name == "The East Road" or room_name == "Inside the Small Village of Frogmorton" or room_name == "Michel Delving" or room_name == "Road to Grey Havens" or room_name == "A Ford on the Way to Tharbad" then
			start_walking(last_moved)
		elseif room_name == "Road to Tharbad" then
			if last_moved == "south" then
				start_walking("east")
			elseif last_moved == "west" then
				start_walking("west")
			end
		else
			stop_walking()
			Note("End of road reached.")
		end
	else
		if (room_name == "A Fork" or room_name == "Greenholm Junction") and (last_moved == "east" or last_moved == "west") then
			start_walking(last_moved)
		elseif room_name == "Waymeet" and (last_moved == "west" or last_moved == "north") then
			if last_moved == "west" then
				start_walking("south")
			elseif last_moved == "north" then
				start_walking("east")
			end
		elseif room_name == "The Crossroad" and (last_moved == "south" or last_moved == "west") then
			if last_moved == "south" then
				start_walking("east")
			elseif last_moved == "west" then
				start_walking("north")
			end
		elseif room_name == "Road to Tharbad" then
			if roads["north"] and roads["south"] and roads["west"] and last_moved ~= "south" and last_moved ~= "west" then
				if last_moved == "east" then
					start_walking("south")
				elseif last_moved == "north" then
					start_walking("west")
				end
			elseif roads["north"] and roads["east"] and roads["south"] and last_moved ~= "north" then
				if last_moved == "south" then
					start_walking("east")
				elseif last_moved == "west" then
					start_walking("north")
				end
			elseif roads["east"] and roads["west"] and roads["south"] and last_moved ~= "north" then
				start_walking(last_moved)
			end
		elseif room_name == "Greenway" then
			if roads["north"] and roads["south"] and roads["west"] and last_moved ~= "east" then
				start_walking(last_moved)
			elseif roads["north"] and roads["east"] and roads["west"] then
				if last_moved == "west" then
					start_walking("north")
				elseif last_moved == "east" or last_moved == "south" then
					start_walking("east")
				end
			end
		elseif room_name == "The East Road" then
			if roads["east"] and roads["west"] and roads["south"] and last_moved ~= "north" then
				start_walking(last_moved)
			elseif roads["east"] and roads["south"] and roads["north"] and last_moved ~= "south" then
				if last_moved == "north" then
					start_walking("east")
				elseif last_moved == "west" then
					start_walking("south")
				end
			elseif roads["west"] and roads["north"] and roads["south"] and last_moved ~= "north" then
				if last_moved == "east" then
					start_walking("north")
				elseif last_moved == "south" then
					start_walking("west")
				end
			end
		else
			stop_walking()
			Note("Junction reached.")
		end
	end
end

function start_walking(line)
	local direction = nil
	for dir, reversed in pairs(REVERSE_DIRECTIONS) do
		if line ~= "" and string.startswith(dir, line) then
			direction = dir
			break
		end
	end
	if direction then
		walking = true
		Send(direction)
	else 
		Note("Invalid starting direction")
	end
end

function stop_walking()
	walking = false
	Note("Path Walker Disabled.")
end

function OnPluginBroadcast (msg, id, name, text)
	if walking and id == GMCP_HANDLER_ID and name == GMCP_HANDLER_NAME and SUPPORTED_GMCP_PACKAGES[msg] then
		local tbl = {}
		gmcp.parse(tbl, msg, text)
		if msg == EVENT_MOVED then
			table.clear(roads)
			last_moved = tbl["dir"] or ""
		elseif last_moved ~= "" and msg == ROOM_INFO then
			room_name = tbl.name and normalize(tbl.name) or ""
			for short_direction, long_direction in pairs(EXPANDED_DIRECTIONS) do
				local room_exits = tbl["exits"]
				local room_exit = room_exits and room_exits[short_direction] or nil
				local exit_flags = room_exit and room_exit["flags"] or nil
				if exit_flags and table.index(exit_flags, "road") then
					table.set_add(roads, long_direction)
				end
			end
			walk_next()
			last_moved = ""
		end
	end
end

]]>
</script>


</muclient>
