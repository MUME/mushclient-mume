<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Monday, March 12, 2012, 11:18 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "mume_xp_counter" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_xp_counter"
   author="Nick Stockton"
   id="b84e490e3bdfca04b01eb410"
   language="Lua"
   purpose="Keeps track of the xp and tp that you receive on Mume."
   date_written="2012-03-12 11:17:05"
   requires="4.70"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Aliases  -->

<aliases>
  <alias
   name="display_xp_info"
   match="xp"
   enabled="y"
   group="mume_xp_counter"
   omit_from_log="y"
   send_to="12"
   sequence="100"
  >
  <send>xp_display()</send>
  </alias>
  <alias
   name="display_tps"
   match="tp"
   enabled="y"
   group="mume_xp_counter"
   omit_from_log="y"
   send_to="12"
   sequence="100"
  >
  <send>
gained_tp = current_tp - previous_gained_tp
previous_gained_tp = current_tp
tp_display()
  </send>
  </alias>
  <alias
   name="display_tnl_info"
   match="tnl"
   enabled="y"
   group="mume_xp_counter"
   omit_from_log="y"
   send_to="12"
   sequence="100"
  >
  <send>tnl_display()</send>
  </alias>
  <alias
   name="display_and_report_tnl_info"
   match="rptnl"
   enabled="y"
   group="mume_xp_counter"
   omit_from_log="y"
   send_to="12"
   sequence="100"
  >
  <send>tnl_display(true)</send>
  </alias>
</aliases>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="mume_xp_counter"
   match="^You (?:feel more experienced|receive your share of experience)\."
   name="received_kill_xp"
   regexp="y"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>
if not received_experience then
	received_experience = true
	if not mpm_gmcp_enabled then
		DoAfterSpecial(0.1, "on_received_experience()", sendto.scriptafteromit)
	end
end
  </send>
  </trigger>
</triggers>

<!--  Script  -->


<script>
<![CDATA[
require("mystdlib")
gmcp = require("gmcp")

GMCP_HANDLER_ID = gmcp.get_handler_id()
GMCP_HANDLER_NAME = gmcp.get_handler_name()
CHAR_VITALS = gmcp.name_to_id("char_vitals")
CHAR_STATUSVARS = gmcp.name_to_id("char_statusvars")
MPM_EVENT = gmcp.name_to_id("mpm_event")
SUPPORTED_GMCP_PACKAGES = table.set_create({CHAR_VITALS, CHAR_STATUSVARS, MPM_EVENT})

mpm_gmcp_enabled = false
current_level = 0
received_experience = false
initial_xp = 0
current_xp = 0
total_next_level_xp = 0
killed_xp = 0
previous_killed_xp = 0
initial_tp = 0
current_tp = 0
total_next_level_tp = 0
gained_tp = 0
previous_gained_tp = 0

function abbreviate(number)
	if number < 1000 then
		return tostring(number)
	elseif number < 1000000 then
		return string.format("%.3fk", number / 1000)
	else
		return string.format("%.3fm", number / 1000000)
	end
end

function xp_display()
	local session_xp = current_xp - initial_xp
	local needed_xp = current_xp <= total_next_level_xp and total_next_level_xp - current_xp or 0
	Note("XP: kill ", abbreviate(killed_xp), ", session ", abbreviate(session_xp), ", needed ", abbreviate(needed_xp))
end

function tp_display()
	local session_tp = current_tp - initial_tp
	local needed_tp = current_tp <= total_next_level_tp and total_next_level_tp - current_tp or 0
	Note("TP: gained ", abbreviate(gained_tp), ", session ", abbreviate(session_tp), ", needed ", abbreviate(needed_tp))
end

function tnl_display(report)
	local needed_xp = current_xp <= total_next_level_xp and total_next_level_xp - current_xp or 0
	local needed_tp = current_tp <= total_next_level_tp and total_next_level_tp - current_tp or 0
	local output = string.format("%s XP and %s TP to reach level %s.", abbreviate(needed_xp), abbreviate(needed_tp), current_level == 100 and current_level or current_level + 1)
	Note("You need ", output)
	if report then
		Send("emote needs ", output)
	end
end

function on_received_experience()
	killed_xp = current_xp - previous_killed_xp
	previous_killed_xp = current_xp
	received_experience = false
	xp_display()
end

function OnPluginBroadcast (msg, id, name, text)
	if id == GMCP_HANDLER_ID and name == GMCP_HANDLER_NAME and SUPPORTED_GMCP_PACKAGES[msg] then
		local tbl = {}
		gmcp.parse(tbl, msg, text)
		if msg == MPM_EVENT then
			if tbl.gmcp_enabled then
				mpm_gmcp_enabled = true
			elseif received_experience and mpm_gmcp_enabled and tbl.prompt then
				on_received_experience()
			end
		elseif msg == CHAR_VITALS then
			if tbl.xp then
				current_xp = tbl.xp
				if initial_xp == 0 or current_xp < previous_killed_xp then
					-- This is the first value after player logged in, or after player died and lost XP.
					if initial_xp == 0 then
						initial_xp = current_xp
					end
					previous_killed_xp = current_xp
					killed_xp = 0
					received_experience = false
				end
			end
			if tbl.tp then
				current_tp = tbl.tp
				if initial_tp == 0 or current_tp < previous_gained_tp then
					-- This is the first value after player logged in, or after player died and lost TP.
					if initial_tp == 0 then
						initial_tp = current_tp
					end
					previous_gained_tp = current_tp
					gained_tp = 0
				end
			end
		elseif msg == CHAR_STATUSVARS then
			if tbl.level then
				current_level = tbl.level
			end
			if tbl["next-level-xp"] then
				total_next_level_xp = tbl["next-level-xp"]
			end
			if tbl["next-level-tp"] then
				total_next_level_tp = tbl["next-level-tp"]
			end
		end
	end
end

]]>
</script>

</muclient>
