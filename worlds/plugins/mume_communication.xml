<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Wednesday, February 22, 2012, 11:41 PM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "mume_communication" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_communication"
   author="Nick Stockton"
   id="f25b771166a1aaf7385fbaa4"
   language="Lua"
   purpose="Logs various communication channels, and lets you review them."
   date_written="2012-02-22 23:37:24"
   requires="4.70"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="n"
   group="mume_communication"
   match="^(?P&lt;player&gt;[^\s]+(?: \([^)]+\))?) tells you \[GT\] (?P&lt;message&gt;&apos;.+)$"
   name="capture_mmapper_group_tell"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>handle_communication_text("tell", normalize("%0"))</send>
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   name="send_mmapper_group_tell"
   match="^gt\s*?(?:\s+(?P&lt;message&gt;.+))?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="0"
   sequence="100"
  >
  <send>_gtell %&lt;message&gt;</send>
  </alias>
  <alias
   name="review_pray_logs"
   match="^pl\s*?(?:\s+(?P&lt;text&gt;.+))?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>review("pray", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_narrate_logs"
   match="^nl\s*?(?:\s+(?P&lt;text&gt;.+))?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>review("narrate", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_say_logs"
   match="^sl\s*?(?:\s+(?P&lt;text&gt;.+))?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>review("say", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_tell_logs"
   match="^tl\s*?(?:\s+(?P&lt;text&gt;.+))?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>review("tell", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_last_say"
   match="x"
   enabled="y"
   group="mume_communication"
   send_to="12"
   sequence="100"
  >
  <send>review("say", "1")</send>
  </alias>
  <alias
   name="review_last_tell"
   match="X"
   enabled="y"
   group="mume_communication"
   send_to="12"
   sequence="100"
  >
  <send>review("tell", "1")</send>
  </alias>
  <alias
   name="reply"
   match="^rep\s*?(?:\s+(?P&lt;message&gt;.+))?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
if reply_to == "" then
	Note("No one to reply to.")
elseif "%&lt;message&gt;" == "" then
	Note("Replying to ", reply_to, ".")
else
	Send("tell ", reply_to, " %&lt;message&gt;")
end
  </send>
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[
require("mystdlib")
gmcp = require("gmcp")
json = require("dkjson").use_lpeg()
normalize = require("to_ascii").normalize

MUME_SOUNDS = "32821ab3fa17b04a8ab4c420"

GMCP_HANDLER_ID = gmcp.get_handler_id()
GMCP_HANDLER_NAME = gmcp.get_handler_name()
COMM_CHANNEL_LIST = gmcp.name_to_id("comm_channel_list")
COMM_CHANNEL_TEXT = gmcp.name_to_id("comm_channel_text")
MMAPPER_COMM_GROUPTELL = gmcp.name_to_id("mmapper_comm_grouptell")
SUPPORTED_GMCP_PACKAGES = table.set_create({COMM_CHANNEL_LIST, COMM_CHANNEL_TEXT, MMAPPER_COMM_GROUPTELL})

CHANNELS = {
	["tells"] = "tell",
	["questions"] = "tell", -- This is *not* a typo.
	["whispers"] = "tell", -- This is *not* a typo.
	["tales"] = "narrate",
	["prayers"] = "pray",
	["says"] = "say",
	["emotes"] = "say", -- This is *not* a typo.
}
IGNORE_LIST = {
	["Aldereon"] = true,
	["Amanrandil"] = true,
	["Ammunk"] = true,
	["Anarwen"] = true,
	["Angdil"] = true,
	["Anghin"] = true,
	["Angurboda"] = true,
	["Arathorn"] = true,
	["Ardan"] = true,
	["Azra-Zaira"] = true,
	["Barbaras"] = true,
	["Barliman"] = true,
	["Bart"] = true,
	["Beorn"] = true,
	["Berel"] = true,
	["Bombur"] = true,
	["Bono"] = true,
	["Bulgotha"] = true,
	["Burgas"] = true,
	["Celeborn"] = true,
	["Celebrindal"] = true,
	["Cerbus"] = true,
	["Ciryariel"] = true,
	["Clint"] = true,
	["Curifil"] = true,
	["Curundil"] = true,
	["Daegil"] = true,
	["Dolion"] = true,
	["Duinhir"] = true,
	["Eblees"] = true,
	["Ecthelion"] = true,
	["Elrohir"] = true,
	["Elrond"] = true,
	["Eoghha"] = true,
	["Eonwe"] = true,
	["Erestor"] = true,
	["Erienal"] = true,
	["Fardur"] = true,
	["Fred"] = true,
	["Frychra"] = true,
	["Galadriel"] = true,
	["Garfunkle"] = true,
	["Gathrain"] = true,
	["Githil"] = true,
	["Gleored"] = true,
	["Glithral"] = true,
	["Goldberry"] = true,
	["Gorkolung"] = true,
	["Gramps"] = true,
	["Grinder"] = true,
	["Grobb"] = true,
	["Haldir"] = true,
	["Hrivesur"] = true,
	["Huor"] = true,
	["Ilyne"] = true,
	["Isse"] = true,
	["Janice"] = true,
	["Joe"] = true,
	["Karcarak"] = true,
	["Katerine"] = true,
	["Kementir"] = true,
	["Kharak"] = true,
	["Khoan"] = true,
	["Kral"] = true,
	["Lairesur"] = true,
	["Lhanek"] = true,
	["Loryen"] = true,
	["Luanhir"] = true,
	["Malardil"] = true,
	["Maranwe"] = true,
	["Mezagor"] = true,
	["Mormaeg"] = true,
	["Mughaer"] = true,
	["Muranog"] = true,
	["Nagrorh"] = true,
	["Narag"] = true,
	["Narv"] = true,
	["Nob"] = true,
	["Nordri"] = true,
	["Olly"] = true,
	["Orophin"] = true,
	["Ortrun"] = true,
	["Osof"] = true,
	["Osantha"] = true,
	["Quenaire"] = true,
	["Randir"] = true,
	["Rikurr"] = true,
	["Rushak"] = true,
	["Sabb"] = true,
	["Sarion"] = true,
	["Saruman"] = true,
	["Sauron"] = true,
	["Scarred"] = true,
	["Shaghosh"] = true,
	["Smaug"] = true,
	["Squaretooth"] = true,
	["Taurion"] = true,
	["Tethel"] = true,
	["Thurn"] = true,
	["Umuk"] = true,
	["Urgorl"] = true,
	["Washmhurz"] = true,
	["Wuda"] = true,
	["Wyrdda"] = true,
}

reply_to = ""

communications = {
	["narrate"] = {},
	["pray"] = {},
	["say"] = {},
	["tell"] = {},
}

function load_communications()
	for channel, tbl in pairs(communications) do
		local file_name = string.format("%scommunication/%s.txt", GetInfo(67), channel)
		if os.isFile(file_name) then
			for line in io.lines(file_name) do
				local line = string.strip(line)
				if line ~= "" then
					table.insert(tbl, line)
				end
			end
		end
	end
end

function review(channel, text)
	local text = string.strip(string.lower(text))
	local output = {}
	if table.isempty(communications[channel]) then
		-- The channel log file is empty.
		table.insert(output, string.capitalize(channel_name) .. " log is empty!")
	elseif string.isdigit(text) and tonumber(text) >= 1 and table.getn(communications[channel]) >= tonumber(text) then
		-- The search string is a number, so output the last (N) lines.
		output = table.slice(communications[channel], tonumber(text) * -1)
	elseif not string.isdigit(text) and text ~= "" then
		-- Output lines that contain the search string.
		for _, line in ipairs(communications[channel]) do
			if string.findpos(string.lower(line), text) then
				table.insert(output, line)
			end
		end
	else
		-- The search string is empty, so output the last 20 lines.
		output = table.slice(communications[channel], -20, -1)
	end
	if table.isempty(output) then
		-- A search string was specified, but no lines matched it.
		table.insert(output, "Nothing found!")
	elseif table.getn(output) > 500 then
		-- Truncate the output if it exceeds 500 lines.
		output = table.slice(output, -500)
	end
	Note(table.concat(output, "\n"))
end

function handle_communication_list(tbl)
	for _, channel in ipairs(tbl) do
		assert(channel.name, string.format("Channel name not found in: '%s'", json.encode(channel)))
		if CHANNELS[channel.name] then
			CallPlugin(GMCP_HANDLER_ID, "send_gmcp_packet", string.format("Comm.Channel.Enable %q", channel.name))
		end
	end
end

function handle_communication_text(channel_name, message, talker, destination)
	if not message or message == "" then
		return
	end
	if channel_name == "say" then
		CallPlugin(MUME_SOUNDS, "play_communication", "says.wav")
	elseif channel_name == "tell" then
		if talker and string.match(message, "^.- tells the group '.+'$") then
			reply_to = "group"
		elseif talker then
			reply_to = talker
		end
		CallPlugin(MUME_SOUNDS, "play_communication", "tells.wav")
	end
	table.insert(communications[channel_name], message)
	local file = io.open(GetInfo(67) .. "communication/" .. channel_name .. ".txt", "ab")
	file:write(message .. "\r\n")
	file:close()
end

function OnPluginBroadcast (msg, id, name, text)
	if id == GMCP_HANDLER_ID and name == GMCP_HANDLER_NAME and SUPPORTED_GMCP_PACKAGES[msg] then
		local tbl = {}
		gmcp.parse(tbl, msg, text)
		if msg == COMM_CHANNEL_LIST then
			handle_communication_list(tbl)
		elseif msg == COMM_CHANNEL_TEXT then
			local channel_name = CHANNELS[tbl.channel]
			assert(channel_name, string.format("Invalid channel '%s'.", tbl.channel))
			local message = tbl.text and normalize(tbl.text) or ""
			local talker = tbl.talker and string.capitalize(normalize(tbl.talker)) or ""
			assert(talker ~= "", string.format("Invalid talker '%s'.", tbl.talker))
			-- If talker is "You", don't log it.
			-- If talker contains a space or is in the list of single-word mob names, then it is a mob and should not be logged either.
			if talker == "You" or string.findpos(talker, " ") or IGNORE_LIST[talker] then
				return
			end
			local destination = tbl.destination and string.capitalize(normalize(tbl.destination)) or nil
			handle_communication_text(channel_name, message, talker, destination)
		elseif msg == MMAPPER_COMM_GROUPTELL then
			local channel_name = "tell"
			local message = tbl.text and normalize(tbl.text) or ""
			-- The talker may contain spaces in this instance, for example "Dent (Nick)", so filter out everything after the first word.
			-- todo: investigate if group manager tells can contain an empty talker name. The assumption for now is they can.
			local talker = tbl.name and string.match(string.capitalize(normalize(tbl.name)), "^[^%s]*") or nil
			if message ~= "" then
				-- MMapper gags group manager tells in the client if they are handled by GMCP.
				Note(message)
			end
			handle_communication_text(channel_name, message)  -- Don't use talker for now.
		end
	end
end

function OnPluginInstall()
	load_communications()
end

]]>
</script>


</muclient>
