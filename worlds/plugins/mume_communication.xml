<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Wednesday, February 22, 2012, 11:41 PM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "mume_communication" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_communication"
   author="Nick Stockton"
   id="f25b771166a1aaf7385fbaa4"
   language="Lua"
   purpose="Logs various communication channels, and lets you review them."
   date_written="2012-02-22 23:37:24"
   requires="4.70"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Aliases  -->

<aliases>
  <alias
   name="review_pray_logs"
   match="^pl\s*?(?:\s+(?P&lt;text&gt;.+))?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>review("pray", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_narrate_logs"
   match="^nl\s*?(?:\s+(?P&lt;text&gt;.+))?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>review("narrate", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_say_logs"
   match="^sl\s*?(?:\s+(?P&lt;text&gt;.+))?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>review("say", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_tell_logs"
   match="^tl\s*?(?:\s+(?P&lt;text&gt;.+))?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>review("tell", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_last_say"
   match="x"
   enabled="y"
   group="mume_communication"
   send_to="12"
   sequence="100"
  >
  <send>review("say", "1")</send>
  </alias>
  <alias
   name="review_last_tell"
   match="t"
   enabled="y"
   group="mume_communication"
   send_to="12"
   sequence="100"
  >
  <send>review("tell", "1")</send>
  </alias>
  <alias
   name="reply"
   match="^rep\s*?(?:\s+(?P&lt;message&gt;.+))?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>
if reply_to == "" then
	Note("No one to reply to.")
elseif "%&lt;message&gt;" == "" then
	Note("Replying to ", reply_to, ".")
else
	Send("tell ", reply_to, " %&lt;message&gt;")
end
  </send>
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[
require("mystdlib")
MUME_SOUNDS = "32821ab3fa17b04a8ab4c420"
XML_PARSER = "74834d3734b2c8a3a9da4d18"
-- For sounds:
TYPE_COMMUNICATION = 9
-- Types of communications received by the XML parser:
BROADCAST_TELL = 5
BROADCAST_NARRATE = 6
BROADCAST_PRAY = 7
BROADCAST_SAY = 8
BROADCAST_EMOTE = 9
COMMUNICATION_REGEX = rex.new([[^(?:The voice of )?(?P<player>\w+)(?: \(\w+\))? (?:narrates|says|prays|tells you|tells the group|whispers to you[,]?|asks you) \'.+\'$]])
CHANNELS = {
	[BROADCAST_TELL] = "tell",
	[BROADCAST_NARRATE] = "narrate",
	[BROADCAST_PRAY] = "pray",
	[BROADCAST_SAY] = "say",
	[BROADCAST_EMOTE] = "say" -- This is *not* a typo.
}
IGNORE_LIST = {
	["Aldereon"] = true,
	["Anarwen"] = true,
	["Angdil"] = true,
	["Barliman"] = true,
	["Celeborn"] = true,
	["Celebrindal"] = true,
	["Ciryariel"] = true,
	["Clint"] = true,
	["Curundil"] = true,
	["Daegil"] = true,
	["Ecthelion"] = true,
	["Elrond"] = true,
	["Erienal"] = true,
	["Fardur"] = true,
	["Galadriel"] = true,
	["Gramps"] = true,
	["Grinder"] = true,
	["Haldir"] = true,
	["Huor"] = true,
	["Nagrorh"] = true,
	["Nordri"] = true,
	["Orophin"] = true,
	["Sarion"] = true,
	["Sauron"] = true
}

reply_to = ""

function review(channel, text)
	local text = string.strip(text:lower())
	local output = {}
	local channel_lines = {}
	local file_name = string.format("%scommunication/%s.txt", GetInfo(67), channel)
	if not os.isFile(file_name) then
		return Note("The log file for channel '", channel, "' hasn't been created yet. It will be created when a message to the channel has been received.")
	end
	local file = io.open(file_name, "rb")
	for line in file:read("*all"):gmatch("[^\r\n]+") do
		line = string.strip(line)
		if line ~= "" then
			table.insert(channel_lines, line)
		end
	end
	file:close()
	if not next(channel_lines) then
		-- The channel log file is empty.
		output = {string.capitalize(channel_name) .. " log is empty!"}
	elseif string.isdigit(text) and tonumber(text) >= 1 and #channel_lines >= tonumber(text) then
		-- The search string is a number, so output the last (N) lines.
		output = table.slice(channel_lines, tonumber(text) * -1)
	elseif not string.isdigit(text) and text ~= "" then
		-- Output lines that contain the search string.
		output = {}
		for _, line in ipairs(channel_lines) do
			if string.findpos(line:lower(), text) then
				table.insert(output, line)
			end
		end
	else
		-- The search string is empty, so output the last 20 lines.
		output = table.slice(channel_lines, -20, -1)
	end
	if not next(output) then
		-- A search string was specified, but no lines matched it.
		table.insert(output, "Nothing found!")
	elseif #output > 500 then
		-- Truncate the output if it exceeds 500 lines.
		output = table.slice(output, -500)
	end
	Note(table.concat(output, "\n"))
end

function OnPluginBroadcast (msg, id, name, text)
	if id == XML_PARSER and name == "mume_xml_parser" and msg >= BROADCAST_TELL and msg <= BROADCAST_EMOTE and text ~= "" then
		local player = ""
		if msg == BROADCAST_EMOTE then
			player = text:match("%S+")
		else
			local starting, ending, match = COMMUNICATION_REGEX:match(text)
			player = match and match["player"] or ""
		end
		if player ~= "" and not IGNORE_LIST[player] then
			local channel = CHANNELS[msg]
			if channel == "say" then
				CallPlugin(MUME_SOUNDS, "play", TYPE_COMMUNICATION, "says.wav")
			elseif channel == "tell" then
				if text:match("^.- tells the group '.+'$") then
					reply_to = "group"
				else
					reply_to = player
				end
				CallPlugin(MUME_SOUNDS, "play", TYPE_COMMUNICATION, "tells.wav")
			end
			local file = io.open(GetInfo(67) .. "communication/" .. channel .. ".txt", "ab")
			file:write(text .. "\r\n")
			file:close()
		end
	end
end

]]>
</script>


</muclient>
