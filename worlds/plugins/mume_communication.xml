<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Wednesday, February 22, 2012, 11:41 PM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "mume_communication" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_communication"
   author="Nick Stockton"
   id="f25b771166a1aaf7385fbaa4"
   language="Lua"
   purpose="Logs various communication channels, and lets you review them."
   date_written="2012-02-22 23:37:24"
   requires="4.70"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="mume_communication"
   match="^EMOTE:(?P&lt;line&gt;(?P&lt;player&gt;\w+) .+):EMOTE$"
   name="log_emotes"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="80"
  >
  <send>communicationAdd("say", "%&lt;player&gt;", StripANSI("%&lt;line&gt;"))</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_communication"
   match="^(?P&lt;channel&gt;TELL|SAY|NARRATE|PRAY):(?P&lt;line&gt;(?:The voice of )?(?P&lt;player&gt;\w+) (?:narrates|says|prays|tells you|tells the group|whispers to you[,]?|asks you) '.+'):(?P=channel)$"
   name="log_channels"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="80"
  >
  <send>communicationAdd(string.lower("%&lt;channel&gt;"), "%&lt;player&gt;", StripANSI("%&lt;line&gt;"))</send>
  </trigger>
  <trigger
   enabled="y"
   group="mume_communication"
   match="^(?P&lt;channel&gt;TELL|SAY|NARRATE|PRAY|EMOTE):(?P&lt;line&gt;.+):(?P=channel)$"
   name="print_channels"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>Note(StripANSI("%&lt;line&gt;"))</send>
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   name="review_pray_logs"
   match="^pl(?P&lt;text&gt; .+)?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>communicationReview("pray", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_narrate_logs"
   match="^nl(?P&lt;text&gt; .+)?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>communicationReview("narrate", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_say_logs"
   match="^sl(?P&lt;text&gt; .+)?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>communicationReview("say", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_tell_logs"
   match="^tl(?P&lt;text&gt; .+)?$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>communicationReview("tell", "%&lt;text&gt;")</send>
  </alias>
  <alias
   name="review_last_say"
   match="x"
   enabled="y"
   group="mume_communication"
   send_to="12"
   sequence="100"
  >
  <send>communicationReview("say", "1")</send>
  </alias>
  <alias
   name="review_last_tell"
   match="t"
   enabled="y"
   group="mume_communication"
   send_to="12"
   sequence="100"
  >
  <send>communicationReview("tell", "1")</send>
  </alias>
  <alias
   name="reply"
   match="^rep(?:l|ly)? (?P&lt;message&gt;.+)$"
   enabled="y"
   group="mume_communication"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if communicationReplyTo then
	Send("tell " .. communicationReplyTo .. " %&lt;message&gt;")
else
	Note("No one to reply to.")
end</send>
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[
require("mystdlib")
MUME_SOUNDS = "32821ab3fa17b04a8ab4c420"
TYPE_COMMUNICATION = 9

IGNORE_LIST = {
	["Aldereon"] = true,
	["Anarwen"] = true,
	["Angdil"] = true,
	["Barliman"] = true,
	["Celeborn"] = true,
	["Celebrindal"] = true,
	["Ciryariel"] = true,
	["Clint"] = true,
	["Curundil"] = true,
	["Daegil"] = true,
	["Ecthelion"] = true,
	["Elrond"] = true,
	["Erienal"] = true,
	["Fardur"] = true,
	["Galadriel"] = true,
	["Gramps"] = true,
	["Grinder"] = true,
	["Haldir"] = true,
	["Huor"] = true,
	["Nagrorh"] = true,
	["Nordri"] = true,
	["Orophin"] = true,
	["Sarion"] = true,
	["Sauron"] = true
}

communicationReplyTo = nil

function communicationAdd(channel, player, line)
	Note(line)
	if not IGNORE_LIST[player] then
		if channel == "say" then
			CallPlugin(MUME_SOUNDS, "play", TYPE_COMMUNICATION, GetInfo(67) .. "sounds/says.wav")
		elseif channel == "tell" then
			if line:match("^.- tells the group '.+'$") then
				communicationReplyTo = "group"
			else
				communicationReplyTo = player
			end
			CallPlugin(MUME_SOUNDS, "play", TYPE_COMMUNICATION, GetInfo(67) .. "sounds/tells.wav")
		end
		local file = io.open(GetInfo(67) .. "communication/" .. channel .. ".txt", "ab")
		file:write(line .. "\r\n")
		file:close()
	end
end

function communicationReview(channel, text)
	local text = string.strip(text:lower())
	local output = {}
	local channelLines = {}
	local fileName = string.format("%scommunication/%s.txt", GetInfo(67), channel)
	if not os.isFile(fileName) then
		return Note(string.format("The log file for channel '%s' hasn't been created yet. It will be created when a message to the channel has been received.", channel))
	end
	local file = io.open(fileName, "rb")
	for line in file:read("*all"):gmatch("[^\r\n]+") do
		line = string.strip(line)
		if line ~= "" then
			table.insert(channelLines, line)
		end
	end
	file:close()
	if next(channelLines) == nil then
		-- The channel log file is empty.
		output = {string.capitalize(channelName) .. " log is empty!"}
	elseif string.isdigit(text) and tonumber(text) >= 1 and #channelLines >= tonumber(text) then
		-- The search string is a number, so output the last (N) lines.
		output = table.slice(channelLines, tonumber(text) * -1)
	elseif not string.isdigit(text) and text ~= "" then
		-- Output lines that contain the search string.
		output = {}
		for i, line in ipairs(channelLines) do
			if string.match(line:lower(), text) then
				table.insert(output, line)
			end
		end
	else
		-- The search string is empty, so output the last 20 lines.
		output = table.slice(channelLines, -20, -1)
	end
	if next(output) == nil then
		-- A search string was specified, but no lines matched it.
		table.insert(output, "Nothing found!")
	elseif #output > 500 then
		-- Truncate the output if it exceeds 500 lines.
		output = table.slice(output, -500)
	end
	Note(table.concat(output, "\n"))
end

]]>
</script>


</muclient>
