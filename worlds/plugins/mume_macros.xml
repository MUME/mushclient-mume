<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Sunday, September 09, 2012, 9:56 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "mume_macros" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_macros"
   author="Nick Stockton"
   id="a0a9837c5486a08f13defd7a"
   language="Lua"
   purpose="Defines keyboard macros to be used while playing mume."
   date_written="2012-09-09 09:55:17"
   requires="4.70"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->


<script>
<![CDATA[
require("mystdlib")
gmcp = require("gmcp")
normalize = require("to_ascii").normalize

CONFIG = "d19a2f0a604c96b7318aa67f"
MUME_CASTOR_SPELL_TRANSLATOR = "8b4e5dd676d8477dc5f14376"
MUME_HUNTING = "d54f37916d74ac326debe33f"
MUME_SOUNDS = "32821ab3fa17b04a8ab4c420"
TTS = "925cdd0331023d9f0b8f05a7"

GMCP_HANDLER_ID = gmcp.get_handler_id()
GMCP_HANDLER_NAME = gmcp.get_handler_name()
CHAR_VITALS = gmcp.name_to_id("char_vitals")
ROOM_INFO = gmcp.name_to_id("room_info")

LIGHT_SYMBOLS = {
	["*"] = "sun light",
	["!"] = "artificial light",
	[")"] = "moon light",
	["o"] = "darkness",
}

char_vitals_cache = {}
room_info_cache = {}
repeat_commands = {}
last_opponent = "Unknown"
local return_code, keyboard_layout = CallPlugin(CONFIG, "get", "keyboard_layout")


if keyboard_layout == "dvorak" then
	Accelerator("Alt+C", "north")
	Accelerator("Alt+T", "south")
	Accelerator("Alt+N", "east")
	Accelerator("Alt+H", "west")
	Accelerator("Alt+G", "up")
	Accelerator("Alt+R", "down")
	Accelerator("Alt+shift+C", "scout north")
	Accelerator("Alt+shift+T", "scout south")
	Accelerator("Alt+shift+N", "scout east")
	Accelerator("Alt+shift+H", "scout west")
	Accelerator("Alt+shift+G", "scout up")
	Accelerator("Alt+shift+R", "scout down")
	AcceleratorTo("alt+S", "speak_gmcp_event('room_name')", sendto.script)
	AcceleratorTo("alt+I", "speak_gmcp_event('buffer')", sendto.script)
	AcceleratorTo("alt+U", "speak_gmcp_event('opponent')", sendto.script)
	AcceleratorTo("alt+E", "speak_gmcp_event('hp-string')", sendto.script)
	AcceleratorTo("alt+O", "speak_gmcp_event('mana-string')", sendto.script)
	AcceleratorTo("alt+A", "speak_gmcp_event('mp-string')", sendto.script)
	AcceleratorTo("alt+;", "speak_gmcp_event('light')", sendto.script)
	AcceleratorTo("alt+Q", "speak_gmcp_event('room_environment')", sendto.script)
	AcceleratorTo("alt+J", "speak_gmcp_event('last_opponent')", sendto.script)
	AcceleratorTo("alt+K", "speak_gmcp_event('flags')", sendto.script)
	AcceleratorTo("alt+X", "speak_gmcp_event('sneak')", sendto.script)
	AcceleratorTo("alt+'", "repeat_command(1)", sendto.script)
	AcceleratorTo("alt+shift+'", "set_repeat(1, GetCommand()); SelectCommand(); PasteCommand('')", sendto.script)
	AcceleratorTo("alt+,", "repeat_command(2)", sendto.script)
	AcceleratorTo("alt+shift+,", "set_repeat(2, GetCommand()); SelectCommand(); PasteCommand('')", sendto.script)
	AcceleratorTo("alt+.", "repeat_command(3)", sendto.script)
	AcceleratorTo("alt+shift+.", "set_repeat(3, GetCommand()); SelectCommand(); PasteCommand('')", sendto.script)
	AcceleratorTo("alt+P", "repeat_command(4)", sendto.script)
	AcceleratorTo("alt+shift+P", "set_repeat(4, GetCommand()); SelectCommand(); PasteCommand('')", sendto.script)
else
	Accelerator("Alt+I", "north")
	Accelerator("Alt+K", "south")
	Accelerator("Alt+L", "east")
	Accelerator("Alt+J", "west")
	Accelerator("Alt+U", "up")
	Accelerator("Alt+O", "down")
	Accelerator("Alt+shift+I", "scout north")
	Accelerator("Alt+shift+K", "scout south")
	Accelerator("Alt+shift+L", "scout east")
	Accelerator("Alt+shift+J", "scout west")
	Accelerator("Alt+shift+U", "scout up")
	Accelerator("Alt+shift+O", "scout down")
	AcceleratorTo("alt+;", "speak_gmcp_event('room_name')", sendto.script)
	AcceleratorTo("alt+G", "speak_gmcp_event('buffer')", sendto.script)
	AcceleratorTo("alt+F", "speak_gmcp_event('opponent')", sendto.script)
	AcceleratorTo("alt+D", "speak_gmcp_event('hp-string')", sendto.script)
	AcceleratorTo("alt+S", "speak_gmcp_event('mana-string')", sendto.script)
	AcceleratorTo("alt+A", "speak_gmcp_event('mp-string')", sendto.script)
	AcceleratorTo("alt+Z", "speak_gmcp_event('light')", sendto.script)
	AcceleratorTo("alt+X", "speak_gmcp_event('room_environment')", sendto.script)
	AcceleratorTo("alt+C", "speak_gmcp_event('last_opponent')", sendto.script)
	AcceleratorTo("alt+V", "speak_gmcp_event('flags')", sendto.script)
	AcceleratorTo("alt+B", "speak_gmcp_event('sneak')", sendto.script)
	AcceleratorTo("alt+Q", "repeat_command(1)", sendto.script)
	AcceleratorTo("alt+shift+Q", "set_repeat(1, GetCommand()); SelectCommand(); PasteCommand('')", sendto.script)
	AcceleratorTo("alt+W", "repeat_command(2)", sendto.script)
	AcceleratorTo("alt+shift+W", "set_repeat(2, GetCommand()); SelectCommand(); PasteCommand('')", sendto.script)
	AcceleratorTo("alt+E", "repeat_command(3)", sendto.script)
	AcceleratorTo("alt+shift+E", "set_repeat(3, GetCommand()); SelectCommand(); PasteCommand('')", sendto.script)
	AcceleratorTo("alt+R", "repeat_command(4)", sendto.script)
	AcceleratorTo("alt+shift+R", "set_repeat(4, GetCommand()); SelectCommand(); PasteCommand('')", sendto.script)
end

for i = 1, 9 do
	AcceleratorTo("alt+" .. tostring(i), string.format("CallPlugin(MUME_HUNTING, 'do_action_instance', 1, 1, %d)", i), sendto.script)
	AcceleratorTo("alt+shift+" .. tostring(i), string.format("CallPlugin(MUME_HUNTING, 'do_action_instance', 1, 2, %d)", i), sendto.script)
	AcceleratorTo("ctrl+" .. tostring(i), string.format("CallPlugin(MUME_HUNTING, 'do_action_instance', 2, 1, %d)", i), sendto.script)
	AcceleratorTo("ctrl+shift+" .. tostring(i), string.format("CallPlugin(MUME_HUNTING, 'do_action_instance', 2, 2, %d)", i), sendto.script)
end
AcceleratorTo("alt+0", "CallPlugin(MUME_HUNTING, 'do_action_instance', 1, 1, 10)", sendto.script)
AcceleratorTo("alt+shift+0", "CallPlugin(MUME_HUNTING, 'do_action_instance', 1, 2, 10)", sendto.script)
AcceleratorTo("ctrl+0", "CallPlugin(MUME_HUNTING, 'do_action_instance', 2, 1, 10)", sendto.script)
AcceleratorTo("ctrl+shift+0", "CallPlugin(MUME_HUNTING, 'do_action_instance', 2, 2, 10)", sendto.script)

Accelerator("ctrl+M", "assist")
Accelerator("ctrl+B", "bash")
Accelerator("ctrl+H", "shoot")
AcceleratorTo ("ctrl+U", "SelectCommand(); PasteCommand(''); CallPlugin(TTS, 'say', 'Cleared')", sendto.script)
AcceleratorTo("ctrl+I", "CallPlugin(MUME_CASTOR_SPELL_TRANSLATOR, 'toggle_casting_interrupt')", sendto.script)
AcceleratorTo("F12", "CallPlugin(MUME_SOUNDS, 'adjust_volume', 1)", sendto.script)
AcceleratorTo("shift+F12", "CallPlugin(MUME_SOUNDS, 'adjust_volume', -1)", sendto.script)
AcceleratorTo("ctrl+shift+F12", "CallPlugin(MUME_SOUNDS, 'toggle_mute')", sendto.script)
AcceleratorTo("PageUp", "--", sendto.script)
AcceleratorTo("PageDown", "--", sendto.script)
AcceleratorTo("ctrl+Up", "--", sendto.script)
AcceleratorTo("ctrl+Down", "--", sendto.script)
AcceleratorTo("ctrl+Space", "pause_toggle()", sendto.script)

function pause_toggle()
	local paused = GetInfo(114)
	paused = not paused
	CallPlugin(TTS, "say", paused and "pause" or "unpause", true)
	Pause(paused)
	if not paused then
		-- Scroll to end (Emulate pressing the End key).
		DoCommand("End")
	end
end

function set_repeat(number, command)
	local command = Trim(command)
	if command == "" then
		if repeat_commands[number] then
			Note("'", repeat_commands[number], "' is repeated.")
		else
			Note("Repeat command not set.")
		end
	elseif command == "clear" then
		repeat_commands[number] = nil
		Note("Cleared.")
	else
		repeat_commands[number] = command
		Note("'", repeat_commands[number], "' now repeated.")
	end
end

function repeat_command(number)
	-- local command = repeat_commands[number] or GetCommandList(1)[1]
	if repeat_commands[number] then
		Execute(repeat_commands[number])
	else
		Note("No repeat command.")
	end
end

function get_cache_item(cache_name, value)
	local cache = _G[cache_name]
	assert(cache, string.format("Cache '%s' not in global table.", cache_name))
	local item = cache[value]
	if type(item) == "string" then
		return normalize(item)
	end
	return item
end

function get_char_vitals(value)
	return get_cache_item("char_vitals_cache", value)
end

function get_room_info(value)
	return get_cache_item("room_info_cache", value)
end

function speak_gmcp_event(event)
	local value
	if event == "last_opponent" then
		value = last_opponent .. " last fought"
	elseif event == "sneak" then
		local sneak = get_char_vitals("sneak")
		value = sneak == "S" and "Sneaking" or sneak == "s" and "NoSneak" or "Off"
	elseif event == "flags" then
		local climb = get_char_vitals("climb")
		local ride = get_char_vitals("ride")
		local sneak = get_char_vitals("sneak")
		local swim = get_char_vitals("swim")
		local movement_flags = {
			sneak == "S" and "Sneaking" or sneak == "s" and "NoSneak" or "",
			swim and "Swimming" or "",
			climb == "C" and "Climbing" or climb == "c" and "Climbing safely" or "",
			ride and "Riding" or ride and "Ridden" or "",
		}
		value = string.simplify(table.concat(movement_flags, " "))
		value = value ~= "" and value or "No movement flags"
	elseif string.startswith(event, "room_") then
		local room_event = string.match(event, "^room_(.*)")
		value = get_room_info(room_event)
		value = value or "No room " .. room_event
	else
		value = get_char_vitals(event)
		if event == "light" then
			value = LIGHT_SYMBOLS[value] or "Unknown light"
		elseif event == "mp-string" then
			local ride = get_char_vitals("ride")
			local mount_moves = get_char_vitals("mount-moves")
			value = string.format("%s %s", value or "Unknown", ride and mount_moves or "Not Riding")
		elseif event == "opponent" then
			local opponent_hits = get_char_vitals("opponent-hits")
			value = string.format("%s %s", opponent_hits or "Unknown", value or "Not fighting")
		elseif event == "buffer" then
			local buffer_hits = get_char_vitals("buffer-hits")
			value = string.format("%s %s", buffer_hits or "Unknown", value or "No buffer")
		else
			value = value ~= nil and tostring(value) or "Unknown"
		end
	end
	CallPlugin(TTS, "say", value, true)
end

function OnPluginBroadcast (msg, id, name, text)
	if id == GMCP_HANDLER_ID and name == GMCP_HANDLER_NAME then
		if msg == CHAR_VITALS then
			gmcp.parse(char_vitals_cache, msg, text)
			local opponent = get_char_vitals("opponent")
			local opponent_hits = get_char_vitals("opponent-hits")
			if opponent and opponent_hits then
				last_opponent = Trim(string.format("%s %s", opponent_hits, opponent))
			end
		elseif msg == ROOM_INFO then
			gmcp.parse(room_info_cache, msg, text)
		end
	end
end

]]>
</script>


</muclient>
