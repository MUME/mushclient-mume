<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- This Source Code Form is subject to the terms of the Mozilla Public -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- Saved on Sunday, September 09, 2012, 9:56 AM -->
<!-- MuClient version 4.81 -->

<!-- Plugin "mume_macros" generated by Plugin Wizard -->

<muclient>
<plugin
   name="mume_macros"
   author="Nick Stockton"
   id="a0a9837c5486a08f13defd7a"
   language="Lua"
   purpose="Defines keyboard macros to be used while playing mume."
   date_written="2012-09-09 09:55:17"
   requires="4.70"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Aliases  -->

<aliases>
  <alias
   name="set_repeat_command"
   match="^setrep(?P&lt;command&gt;.*)$"
   enabled="y"
   regexp="y"
   group="mume_macros"
   send_to="12"
   sequence="100"
  >
  <send>set_repeat("%&lt;command&gt;")</send>
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[
TTS = "925cdd0331023d9f0b8f05a7"
CONFIG = "d19a2f0a604c96b7318aa67f"
MUME_CASTOR_SPELL_TRANSLATOR = "8b4e5dd676d8477dc5f14376"
MUME_SOUNDS = "32821ab3fa17b04a8ab4c420"
XML_PARSER = "74834d3734b2c8a3a9da4d18"
BROADCAST_PROMPT = 1
BROADCAST_NAME = 4
PROMPT_REGEX = rex.new([[^(?P<light>[\@\*\!\)o])?(?P<terrain>[\#\(\[\+\.\%fO\~UW\:\=\<])?(?P<weather>[\*\'\"\~\=\-]{1,2})?(?P<movement_flags> [RrSsCcW]{1,4})?(?P<hp> HP\:\w+)?(?P<mp> Mana\:\w+)?(?P<mv> Move\:\w+)?(?P<mount> Mount\:\w+)?(?P<fighting> [^\:]+\:\w+)?(?P<buffer> [^\:]+\:\w+)?.*?>$]])
TERRAIN_SYMBOLS = {
	[":"] = "brush",
	["O"] = "cavern",
	["#"] = "city",
	["."] = "field",
	["f"] = "forest",
	["("] = "hills",
	["["] = "indoors",
	["<"] = "mountains",
	["W"] = "rapids",
	["+"] = "road",
	["%"] = "shallow water",
	["="] = "tunnel",
	["U"] = "under water",
	["~"] = "water"
}
LIGHT_SYMBOLS = {
	["@"] = "lit at",
	["*"] = "sun light",
	["!"] = "artificial light",
	[")"] = "moon light",
	["o"] = "darkness"
}

room_name = "No room name"
repeat_command = nil
local return_code, keyboard_layout = CallPlugin(CONFIG, "get", "keyboard_layout")
last_prompt = {}
last_fought = "Unknown last fought"

if keyboard_layout == "dvorak" then
	Accelerator("Alt+C", "north")
	Accelerator("Alt+T", "south")
	Accelerator("Alt+N", "east")
	Accelerator("Alt+H", "west")
	Accelerator("Alt+G", "up")
	Accelerator("Alt+R", "down")
	Accelerator("Alt+shift+C", "scout north")
	Accelerator("Alt+shift+T", "scout south")
	Accelerator("Alt+shift+N", "scout east")
	Accelerator("Alt+shift+H", "scout west")
	Accelerator("Alt+shift+G", "scout up")
	Accelerator("Alt+shift+R", "scout down")
	AcceleratorTo("alt+S", "CallPlugin(TTS, 'say', room_name, true)", sendto.script)
	Accelerator("Alt+B", "flee")
	Accelerator("Alt+M", "v")
	AcceleratorTo("alt+I", "speak_prompt('buffer')", sendto.script)
	AcceleratorTo("alt+U", "speak_prompt('fighting')", sendto.script)
	AcceleratorTo("alt+E", "speak_prompt('hp')", sendto.script)
	AcceleratorTo("alt+O", "speak_prompt('mp')", sendto.script)
	AcceleratorTo("alt+A", "speak_prompt('mv')", sendto.script)
	AcceleratorTo("alt+;", "speak_prompt('light')", sendto.script)
	AcceleratorTo("alt+Q", "speak_prompt('terrain')", sendto.script)
	AcceleratorTo("alt+J", "speak_prompt('last_fought')", sendto.script)
	AcceleratorTo("alt+K", "speak_prompt('flags')", sendto.script)
	AcceleratorTo("alt+X", "speak_prompt('sneak')", sendto.script)
	AcceleratorTo("alt+P", "repeat_last_command()", sendto.script)
else
	Accelerator("Alt+I", "north")
	Accelerator("Alt+K", "south")
	Accelerator("Alt+L", "east")
	Accelerator("Alt+J", "west")
	Accelerator("Alt+U", "up")
	Accelerator("Alt+O", "down")
	Accelerator("Alt+shift+I", "scout north")
	Accelerator("Alt+shift+K", "scout south")
	Accelerator("Alt+shift+L", "scout east")
	Accelerator("Alt+shift+J", "scout west")
	Accelerator("Alt+shift+U", "scout up")
	Accelerator("Alt+shift+O", "scout down")
	AcceleratorTo("alt+;", "CallPlugin(TTS, 'say', room_name, true)", sendto.script)
	Accelerator("Alt+N", "flee")
	Accelerator("Alt+M", "v")
	AcceleratorTo("alt+G", "speak_prompt('buffer')", sendto.script)
	AcceleratorTo("alt+F", "speak_prompt('fighting')", sendto.script)
	AcceleratorTo("alt+D", "speak_prompt('hp')", sendto.script)
	AcceleratorTo("alt+S", "speak_prompt('mp')", sendto.script)
	AcceleratorTo("alt+A", "speak_prompt('mv')", sendto.script)
	AcceleratorTo("alt+Z", "speak_prompt('light')", sendto.script)
	AcceleratorTo("alt+X", "speak_prompt('terrain')", sendto.script)
	AcceleratorTo("alt+C", "speak_prompt('last_fought')", sendto.script)
	AcceleratorTo("alt+V", "speak_prompt('flags')", sendto.script)
	AcceleratorTo("alt+B", "speak_prompt('sneak')", sendto.script)
	AcceleratorTo("alt+R", "repeat_last_command()", sendto.script)
end

Accelerator("ctrl+shift+M", "assist")
Accelerator("ctrl+shift+B", "bash")
AcceleratorTo ("ctrl+U", "SelectCommand(); PasteCommand(''); CallPlugin(TTS, 'say', 'Cleared')", sendto.script)
AcceleratorTo("ctrl+I", "CallPlugin(MUME_CASTOR_SPELL_TRANSLATOR, 'toggle_casting_interrupt')", sendto.script)
AcceleratorTo("F12", "CallPlugin(MUME_SOUNDS, 'adjust_volume', 1)", sendto.script)
AcceleratorTo("shift+F12", "CallPlugin(MUME_SOUNDS, 'adjust_volume', -1)", sendto.script)
AcceleratorTo("ctrl+shift+F12", "CallPlugin(MUME_SOUNDS, 'toggle_mute')", sendto.script)

function set_repeat(command)
	command = Trim(command)
	if command == "" then
		if repeat_command then
			Note(string.format("'%s' is repeated.", repeat_command))
		else
			Note("Repeat command not set.")
		end
	elseif command == "clear" then
		repeat_command = nil
		Note("Cleared.")
	else
		repeat_command = command
		Note(string.format("'%s' now repeated.", repeat_command))
	end
end

function repeat_last_command()
	local command = repeat_command or GetCommandList(1)[1]
	if command then
		Execute(command)
	else
		Note("No repeat command.")
	end
end

function speak_prompt(key)
	if not next(last_prompt) then
		CallPlugin(TTS, "say", "No prompt", true)
	elseif key == "last_fought" then
		CallPlugin(TTS, "say", last_fought, true)
	elseif not last_prompt[key] then
		CallPlugin(TTS, "say", "Unknown", true)
	else
		CallPlugin(TTS, "say", last_prompt[key], true)
	end
end

function OnPluginBroadcast (msg, id, name, text)
	if id == XML_PARSER and name == "mume_xml_parser" then
		if msg == BROADCAST_NAME then
			room_name = text ~= "" and text or "No room name"
		elseif msg == BROADCAST_PROMPT and text ~= "" then
			local starting, ending, match = PROMPT_REGEX:match(text)
			if match then
				last_prompt = {
					["light"] = match["light"] and LIGHT_SYMBOLS[match["light"]] or "Unknown light",
					["terrain"] = match["terrain"] and TERRAIN_SYMBOLS[match["terrain"]] or "Unknown terrain",
					["flags"] = match["movement_flags"] and string.strip(string.format("%s%s%s%s", string.match(match["movement_flags"], "[S]") and "Sneaking " or string.match(match["movement_flags"], "[s]") and "NoSneak " or "", string.match(match["movement_flags"], "[W]") and "Swimming " or "", string.match(match["movement_flags"], "[C]") and "Climbing " or string.match(match["movement_flags"], "[c]") and "Climbing safely " or "", string.match(match["movement_flags"], "[R]") and "Riding " or string.match(match["movement_flags"], "[r]") and "Ridden " or "")) or "No movement flags",
					["sneak"] = match["movement_flags"] and (string.match(match["movement_flags"], "[S]") and "Sneaking" or string.match(match["movement_flags"], "[s]") and "NoSneak") or "Off",
					["hp"] = match["hp"] and string.split(match["hp"], ":")[2] or "Healthy",
					["mp"] = match["mp"] and string.split(match["mp"], ":")[2] or "Full",
					["mv"] = string.format("%s %s", match["mv"] and string.split(match["mv"], ":")[2] or "Rested", match["movement_flags"] and string.match(match["movement_flags"], "[R]") and (match["mount"] and string.split(match["mount"], ":")[2] or "Rested") or "Not riding"),
					["fighting"] = string.format("%s %s", match["fighting"] and string.split(match["fighting"], ":")[2] or "Unknown", match["fighting"] and string.strip(string.split(match["fighting"], ":")[1]) or "Not fighting"),
					["buffer"] = string.format("%s %s", match["buffer"] and string.split(match["buffer"], ":")[2] or "Unknown", match["buffer"] and string.strip(string.split(match["buffer"], ":")[1]) or "No buffer")
				}
				if last_prompt["fighting"] ~= "Unknown Not fighting" then
					last_fought = string.format("%s last fought", last_prompt["fighting"])
				end
			end -- if match
		end
	end
end

]]>
</script>


</muclient>
